<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Command Reference on Nushell</title><link>https://nushell.sh/website_exploration/docs/commands/</link><description>Recent content in Command Reference on Nushell</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://nushell.sh/website_exploration/docs/commands/index.xml" rel="self" type="application/rss+xml"/><item><title>alias</title><link>https://nushell.sh/website_exploration/docs/commands/alias/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/alias/</guid><description>This command allows you to define shortcuts for other common commands.
The command expects three parameters:
the name of alias the parameters as a space-separated list ([a b ...]), can be empty ([]) the body of the alias as a {...} block Examples Define a custom myecho command as an alias:
&amp;gt; alias myecho [msg] { echo $msg } &amp;gt; myecho &amp;#34;hello world&amp;#34; hello world Since the parameters are well defined, calling the command with the wrong number of parameters will fail properly:</description></item><item><title>append</title><link>https://nushell.sh/website_exploration/docs/commands/append/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/append/</guid><description>This command allows you to append the given row to the table.
Note:
append does not change a file itself. If you want to save your changes, you need to run the save command if you want to add something containing a whitespace character, you need to put it in quotation marks Examples Let&amp;rsquo;s add more cities to this table:
&amp;gt; open cities.txt | lines ━━━┯━━━━━━━━━━━━ # │ &amp;lt;value&amp;gt; ───┼──────────── 0 │ Canberra 1 │ London 2 │ Nairobi 3 │ Washington ━━━┷━━━━━━━━━━━━ You can add a new row by using append:</description></item><item><title>average</title><link>https://nushell.sh/website_exploration/docs/commands/average/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/average/</guid><description>This command allows you to calculate the average of values in a column.
Examples To get the average of the file sizes in a directory, simply pipe the size column from the ls command to the average command.
&amp;gt; ls | get size | average ━━━━━━━━━ &amp;lt;value&amp;gt; ━━━━━━━━━ 2282.727272727273 ━━━━━━━━━ &amp;gt; pwd | split-row / | size | get chars | average ━━━━━━━━━ &amp;lt;value&amp;gt; ━━━━━━━━━ 5.250000000000000 ━━━━━━━━━ Note that average only works for integer and byte values.</description></item><item><title>cal</title><link>https://nushell.sh/website_exploration/docs/commands/cal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/cal/</guid><description>Use cal to display a calendar.
Flags -y / --year Display the year column -q / --quarter Display the quarter column -m / --month Display the month column ----full-year Display a year-long calendar for the specified year ----month-names Display a year-long calendar for the specified year
Examples &amp;gt; cal ───┬────────┬────────┬─────────┬───────────┬─────────┬────────┬────────── # │ sunday │ monday │ tuesday │ wednesday │ thurday │ friday │ saturday ───┼────────┼────────┼─────────┼───────────┼─────────┼────────┼────────── 0 │ │ │ │ │ │ 1 │ 2 1 │ 3 │ 4 │ 5 │ 6 │ 7 │ 8 │ 9 2 │ 10 │ 11 │ 12 │ 13 │ 14 │ 15 │ 16 3 │ 17 │ 18 │ 19 │ 20 │ 21 │ 22 │ 23 4 │ 24 │ 25 │ 26 │ 27 │ 28 │ 29 │ 30 5 │ 31 │ │ │ │ │ │ ───┴────────┴────────┴─────────┴───────────┴─────────┴────────┴────────── &amp;gt; cal -yqm --full-year 2020 ────┬──────┬─────────┬───────┬────────┬────────┬─────────┬───────────┬─────────┬────────┬────────── # │ year │ quarter │ month │ sunday │ monday │ tuesday │ wednesday │ thurday │ friday │ saturday ────┼──────┼─────────┼───────┼────────┼────────┼─────────┼───────────┼─────────┼────────┼────────── 0 │ 2020 │ 1 │ 1 │ │ │ │ 1 │ 2 │ 3 │ 4 1 │ 2020 │ 1 │ 1 │ 5 │ 6 │ 7 │ 8 │ 9 │ 10 │ 11 2 │ 2020 │ 1 │ 1 │ 12 │ 13 │ 14 │ 15 │ 16 │ 17 │ 18 3 │ 2020 │ 1 │ 1 │ 19 │ 20 │ 21 │ 22 │ 23 │ 24 │ 25 4 │ 2020 │ 1 │ 1 │ 26 │ 27 │ 28 │ 29 │ 30 │ 31 │ 5 │ 2020 │ 1 │ 2 │ │ │ │ │ │ │ 1 6 │ 2020 │ 1 │ 2 │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 │ 8 7 │ 2020 │ 1 │ 2 │ 9 │ 10 │ 11 │ 12 │ 13 │ 14 │ 15 8 │ 2020 │ 1 │ 2 │ 16 │ 17 │ 18 │ 19 │ 20 │ 21 │ 22 9 │ 2020 │ 1 │ 2 │ 23 │ 24 │ 25 │ 26 │ 27 │ 28 │ 29 10 │ 2020 │ 1 │ 3 │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 11 │ 2020 │ 1 │ 3 │ 8 │ 9 │ 10 │ 11 │ 12 │ 13 │ 14 12 │ 2020 │ 1 │ 3 │ 15 │ 16 │ 17 │ 18 │ 19 │ 20 │ 21 13 │ 2020 │ 1 │ 3 │ 22 │ 23 │ 24 │ 25 │ 26 │ 27 │ 28 14 │ 2020 │ 1 │ 3 │ 29 │ 30 │ 31 │ │ │ │ 15 │ 2020 │ 2 │ 4 │ │ │ │ 1 │ 2 │ 3 │ 4 16 │ 2020 │ 2 │ 4 │ 5 │ 6 │ 7 │ 8 │ 9 │ 10 │ 11 17 │ 2020 │ 2 │ 4 │ 12 │ 13 │ 14 │ 15 │ 16 │ 17 │ 18 18 │ 2020 │ 2 │ 4 │ 19 │ 20 │ 21 │ 22 │ 23 │ 24 │ 25 19 │ 2020 │ 2 │ 4 │ 26 │ 27 │ 28 │ 29 │ 30 │ │ 20 │ 2020 │ 2 │ 5 │ │ │ │ │ │ 1 │ 2 21 │ 2020 │ 2 │ 5 │ 3 │ 4 │ 5 │ 6 │ 7 │ 8 │ 9 22 │ 2020 │ 2 │ 5 │ 10 │ 11 │ 12 │ 13 │ 14 │ 15 │ 16 23 │ 2020 │ 2 │ 5 │ 17 │ 18 │ 19 │ 20 │ 21 │ 22 │ 23 24 │ 2020 │ 2 │ 5 │ 24 │ 25 │ 26 │ 27 │ 28 │ 29 │ 30 25 │ 2020 │ 2 │ 5 │ 31 │ │ │ │ │ │ 26 │ 2020 │ 2 │ 6 │ │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 27 │ 2020 │ 2 │ 6 │ 7 │ 8 │ 9 │ 10 │ 11 │ 12 │ 13 28 │ 2020 │ 2 │ 6 │ 14 │ 15 │ 16 │ 17 │ 18 │ 19 │ 20 29 │ 2020 │ 2 │ 6 │ 21 │ 22 │ 23 │ 24 │ 25 │ 26 │ 27 30 │ 2020 │ 2 │ 6 │ 28 │ 29 │ 30 │ │ │ │ 31 │ 2020 │ 3 │ 7 │ │ │ │ 1 │ 2 │ 3 │ 4 32 │ 2020 │ 3 │ 7 │ 5 │ 6 │ 7 │ 8 │ 9 │ 10 │ 11 33 │ 2020 │ 3 │ 7 │ 12 │ 13 │ 14 │ 15 │ 16 │ 17 │ 18 34 │ 2020 │ 3 │ 7 │ 19 │ 20 │ 21 │ 22 │ 23 │ 24 │ 25 35 │ 2020 │ 3 │ 7 │ 26 │ 27 │ 28 │ 29 │ 30 │ 31 │ 36 │ 2020 │ 3 │ 8 │ │ │ │ │ │ │ 1 37 │ 2020 │ 3 │ 8 │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 │ 8 38 │ 2020 │ 3 │ 8 │ 9 │ 10 │ 11 │ 12 │ 13 │ 14 │ 15 39 │ 2020 │ 3 │ 8 │ 16 │ 17 │ 18 │ 19 │ 20 │ 21 │ 22 40 │ 2020 │ 3 │ 8 │ 23 │ 24 │ 25 │ 26 │ 27 │ 28 │ 29 41 │ 2020 │ 3 │ 8 │ 30 │ 31 │ │ │ │ │ 42 │ 2020 │ 3 │ 9 │ │ │ 1 │ 2 │ 3 │ 4 │ 5 43 │ 2020 │ 3 │ 9 │ 6 │ 7 │ 8 │ 9 │ 10 │ 11 │ 12 44 │ 2020 │ 3 │ 9 │ 13 │ 14 │ 15 │ 16 │ 17 │ 18 │ 19 45 │ 2020 │ 3 │ 9 │ 20 │ 21 │ 22 │ 23 │ 24 │ 25 │ 26 46 │ 2020 │ 3 │ 9 │ 27 │ 28 │ 29 │ 30 │ │ │ 47 │ 2020 │ 4 │ 10 │ │ │ │ │ 1 │ 2 │ 3 48 │ 2020 │ 4 │ 10 │ 4 │ 5 │ 6 │ 7 │ 8 │ 9 │ 10 49 │ 2020 │ 4 │ 10 │ 11 │ 12 │ 13 │ 14 │ 15 │ 16 │ 17 50 │ 2020 │ 4 │ 10 │ 18 │ 19 │ 20 │ 21 │ 22 │ 23 │ 24 51 │ 2020 │ 4 │ 10 │ 25 │ 26 │ 27 │ 28 │ 29 │ 30 │ 31 52 │ 2020 │ 4 │ 11 │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 53 │ 2020 │ 4 │ 11 │ 8 │ 9 │ 10 │ 11 │ 12 │ 13 │ 14 54 │ 2020 │ 4 │ 11 │ 15 │ 16 │ 17 │ 18 │ 19 │ 20 │ 21 55 │ 2020 │ 4 │ 11 │ 22 │ 23 │ 24 │ 25 │ 26 │ 27 │ 28 56 │ 2020 │ 4 │ 11 │ 29 │ 30 │ │ │ │ │ 57 │ 2020 │ 4 │ 12 │ │ │ 1 │ 2 │ 3 │ 4 │ 5 58 │ 2020 │ 4 │ 12 │ 6 │ 7 │ 8 │ 9 │ 10 │ 11 │ 12 59 │ 2020 │ 4 │ 12 │ 13 │ 14 │ 15 │ 16 │ 17 │ 18 │ 19 60 │ 2020 │ 4 │ 12 │ 20 │ 21 │ 22 │ 23 │ 24 │ 25 │ 26 61 │ 2020 │ 4 │ 12 │ 27 │ 28 │ 29 │ 30 │ 31 │ │ ────┴──────┴─────────┴───────┴────────┴────────┴─────────┴───────────┴─────────┴────────┴────────── &amp;gt; cal -yqm --full-year 2020 --month-names ────┬──────┬─────────┬───────────┬────────┬────────┬─────────┬───────────┬─────────┬────────┬────────── # │ year │ quarter │ month │ sunday │ monday │ tuesday │ wednesday │ thurday │ friday │ saturday ────┼──────┼─────────┼───────────┼────────┼────────┼─────────┼───────────┼─────────┼────────┼────────── 0 │ 2020 │ 1 │ january │ │ │ │ 1 │ 2 │ 3 │ 4 1 │ 2020 │ 1 │ january │ 5 │ 6 │ 7 │ 8 │ 9 │ 10 │ 11 2 │ 2020 │ 1 │ january │ 12 │ 13 │ 14 │ 15 │ 16 │ 17 │ 18 3 │ 2020 │ 1 │ january │ 19 │ 20 │ 21 │ 22 │ 23 │ 24 │ 25 4 │ 2020 │ 1 │ january │ 26 │ 27 │ 28 │ 29 │ 30 │ 31 │ 5 │ 2020 │ 1 │ february │ │ │ │ │ │ │ 1 6 │ 2020 │ 1 │ february │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 │ 8 7 │ 2020 │ 1 │ february │ 9 │ 10 │ 11 │ 12 │ 13 │ 14 │ 15 8 │ 2020 │ 1 │ february │ 16 │ 17 │ 18 │ 19 │ 20 │ 21 │ 22 9 │ 2020 │ 1 │ february │ 23 │ 24 │ 25 │ 26 │ 27 │ 28 │ 29 10 │ 2020 │ 1 │ march │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 11 │ 2020 │ 1 │ march │ 8 │ 9 │ 10 │ 11 │ 12 │ 13 │ 14 12 │ 2020 │ 1 │ march │ 15 │ 16 │ 17 │ 18 │ 19 │ 20 │ 21 13 │ 2020 │ 1 │ march │ 22 │ 23 │ 24 │ 25 │ 26 │ 27 │ 28 14 │ 2020 │ 1 │ march │ 29 │ 30 │ 31 │ │ │ │ 15 │ 2020 │ 2 │ april │ │ │ │ 1 │ 2 │ 3 │ 4 16 │ 2020 │ 2 │ april │ 5 │ 6 │ 7 │ 8 │ 9 │ 10 │ 11 17 │ 2020 │ 2 │ april │ 12 │ 13 │ 14 │ 15 │ 16 │ 17 │ 18 18 │ 2020 │ 2 │ april │ 19 │ 20 │ 21 │ 22 │ 23 │ 24 │ 25 19 │ 2020 │ 2 │ april │ 26 │ 27 │ 28 │ 29 │ 30 │ │ 20 │ 2020 │ 2 │ may │ │ │ │ │ │ 1 │ 2 21 │ 2020 │ 2 │ may │ 3 │ 4 │ 5 │ 6 │ 7 │ 8 │ 9 22 │ 2020 │ 2 │ may │ 10 │ 11 │ 12 │ 13 │ 14 │ 15 │ 16 23 │ 2020 │ 2 │ may │ 17 │ 18 │ 19 │ 20 │ 21 │ 22 │ 23 24 │ 2020 │ 2 │ may │ 24 │ 25 │ 26 │ 27 │ 28 │ 29 │ 30 25 │ 2020 │ 2 │ may │ 31 │ │ │ │ │ │ 26 │ 2020 │ 2 │ june │ │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 27 │ 2020 │ 2 │ june │ 7 │ 8 │ 9 │ 10 │ 11 │ 12 │ 13 28 │ 2020 │ 2 │ june │ 14 │ 15 │ 16 │ 17 │ 18 │ 19 │ 20 29 │ 2020 │ 2 │ june │ 21 │ 22 │ 23 │ 24 │ 25 │ 26 │ 27 30 │ 2020 │ 2 │ june │ 28 │ 29 │ 30 │ │ │ │ 31 │ 2020 │ 3 │ july │ │ │ │ 1 │ 2 │ 3 │ 4 32 │ 2020 │ 3 │ july │ 5 │ 6 │ 7 │ 8 │ 9 │ 10 │ 11 33 │ 2020 │ 3 │ july │ 12 │ 13 │ 14 │ 15 │ 16 │ 17 │ 18 34 │ 2020 │ 3 │ july │ 19 │ 20 │ 21 │ 22 │ 23 │ 24 │ 25 35 │ 2020 │ 3 │ july │ 26 │ 27 │ 28 │ 29 │ 30 │ 31 │ 36 │ 2020 │ 3 │ august │ │ │ │ │ │ │ 1 37 │ 2020 │ 3 │ august │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 │ 8 38 │ 2020 │ 3 │ august │ 9 │ 10 │ 11 │ 12 │ 13 │ 14 │ 15 39 │ 2020 │ 3 │ august │ 16 │ 17 │ 18 │ 19 │ 20 │ 21 │ 22 40 │ 2020 │ 3 │ august │ 23 │ 24 │ 25 │ 26 │ 27 │ 28 │ 29 41 │ 2020 │ 3 │ august │ 30 │ 31 │ │ │ │ │ 42 │ 2020 │ 3 │ september │ │ │ 1 │ 2 │ 3 │ 4 │ 5 43 │ 2020 │ 3 │ september │ 6 │ 7 │ 8 │ 9 │ 10 │ 11 │ 12 44 │ 2020 │ 3 │ september │ 13 │ 14 │ 15 │ 16 │ 17 │ 18 │ 19 45 │ 2020 │ 3 │ september │ 20 │ 21 │ 22 │ 23 │ 24 │ 25 │ 26 46 │ 2020 │ 3 │ september │ 27 │ 28 │ 29 │ 30 │ │ │ 47 │ 2020 │ 4 │ october │ │ │ │ │ 1 │ 2 │ 3 48 │ 2020 │ 4 │ october │ 4 │ 5 │ 6 │ 7 │ 8 │ 9 │ 10 49 │ 2020 │ 4 │ october │ 11 │ 12 │ 13 │ 14 │ 15 │ 16 │ 17 50 │ 2020 │ 4 │ october │ 18 │ 19 │ 20 │ 21 │ 22 │ 23 │ 24 51 │ 2020 │ 4 │ october │ 25 │ 26 │ 27 │ 28 │ 29 │ 30 │ 31 52 │ 2020 │ 4 │ november │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 53 │ 2020 │ 4 │ november │ 8 │ 9 │ 10 │ 11 │ 12 │ 13 │ 14 54 │ 2020 │ 4 │ november │ 15 │ 16 │ 17 │ 18 │ 19 │ 20 │ 21 55 │ 2020 │ 4 │ november │ 22 │ 23 │ 24 │ 25 │ 26 │ 27 │ 28 56 │ 2020 │ 4 │ november │ 29 │ 30 │ │ │ │ │ 57 │ 2020 │ 4 │ december │ │ │ 1 │ 2 │ 3 │ 4 │ 5 58 │ 2020 │ 4 │ december │ 6 │ 7 │ 8 │ 9 │ 10 │ 11 │ 12 59 │ 2020 │ 4 │ december │ 13 │ 14 │ 15 │ 16 │ 17 │ 18 │ 19 60 │ 2020 │ 4 │ december │ 20 │ 21 │ 22 │ 23 │ 24 │ 25 │ 26 61 │ 2020 │ 4 │ december │ 27 │ 28 │ 29 │ 30 │ 31 │ │ ────┴──────┴─────────┴───────────┴────────┴────────┴─────────┴───────────┴─────────┴────────┴────────── &amp;gt; cal -ym --full-year 2303 --month-names | where month == &amp;#34;june&amp;#34; ───┬──────┬───────┬────────┬────────┬─────────┬───────────┬─────────┬────────┬────────── # │ year │ month │ sunday │ monday │ tuesday │ wednesday │ thurday │ friday │ saturday ───┼──────┼───────┼────────┼────────┼─────────┼───────────┼─────────┼────────┼────────── 0 │ 2303 │ june │ │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 1 │ 2303 │ june │ 7 │ 8 │ 9 │ 10 │ 11 │ 12 │ 13 2 │ 2303 │ june │ 14 │ 15 │ 16 │ 17 │ 18 │ 19 │ 20 3 │ 2303 │ june │ 21 │ 22 │ 23 │ 24 │ 25 │ 26 │ 27 4 │ 2303 │ june │ 28 │ 29 │ 30 │ │ │ │ ───┴──────┴───────┴────────┴────────┴─────────┴───────────┴─────────┴────────┴────────── &amp;gt; cal -my --full-year 2020 --month-names | where friday == 13 ───┬──────┬──────────┬────────┬────────┬─────────┬───────────┬─────────┬────────┬────────── # │ year │ month │ sunday │ monday │ tuesday │ wednesday │ thurday │ friday │ saturday ───┼──────┼──────────┼────────┼────────┼─────────┼───────────┼─────────┼────────┼────────── 0 │ 2020 │ march │ 8 │ 9 │ 10 │ 11 │ 12 │ 13 │ 14 1 │ 2020 │ november │ 8 │ 9 │ 10 │ 11 │ 12 │ 13 │ 14 ───┴──────┴──────────┴────────┴────────┴─────────┴───────────┴─────────┴────────┴──────────</description></item><item><title>calc</title><link>https://nushell.sh/website_exploration/docs/commands/calc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/calc/</guid><description>calc is a command that takes a math expression from the pipeline and calculates that into a number.
This command supports the following operations -
operations :
binary operators: +, -, *, /, % (remainder), ^ (power) unary operators: +, -, ! (factorial) functions :
sqrt, abs exp, ln, log10 sin, cos, tan, asin, acos, atan, atan2 sinh, cosh, tanh, asinh, acosh, atanh floor, ceil, round signum max(x, &amp;hellip;), min(x, &amp;hellip;): maximum and minimum of 1 or more numbers constants:</description></item><item><title>cd</title><link>https://nushell.sh/website_exploration/docs/commands/cd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/cd/</guid><description>If you didn&amp;rsquo;t already know, the cd command is very simple. It stands for &amp;lsquo;change directory&amp;rsquo; and it does exactly that. It changes the current directory to the one specified. If no directory is specified, it takes you to the home directory. Additionally, using cd .. takes you to the parent directory.
Examples /home/username&amp;gt; cd Desktop /home/username/Desktop&amp;gt; now your current directory has been changed /home/username/Desktop/nested/folders&amp;gt; cd .. /home/username/Desktop/nested&amp;gt; cd .. /home/username/Desktop&amp;gt; cd .</description></item><item><title>compact</title><link>https://nushell.sh/website_exploration/docs/commands/compact/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/compact/</guid><description>This command allows us to filters out rows with empty columns. Other commands are capable of feeding compact with their output through pipelines.
Usage &amp;gt; [input-command] | compact [column-name] Examples Let&amp;rsquo;s say we have a table like this:
&amp;gt; open contacts.json ━━━┯━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━ # │ name │ email ───┼──────────┼────────────────── 0 │ paul │ paul@example.com 1 │ andres │ 2 │ jonathan │ ━━━┷━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━ compact allows us to filter out rows with empty email column:</description></item><item><title>config</title><link>https://nushell.sh/website_exploration/docs/commands/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/config/</guid><description>Configuration management.
Syntax: config {flags}
Flags --load Load the config from the path given --set Set a value in the config --set_into Sets a variable from values in the pipeline --get Get a value from the config --remove Remove a value from the config --clear Clear the config --path Return the path to the config file</description></item><item><title>count</title><link>https://nushell.sh/website_exploration/docs/commands/count/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/count/</guid><description>This command counts the number of rows in a table.
Examples &amp;gt; ls ━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┯━━━━━━━━━━━┯━━━━━━━━━━┯━━━━━━━━━┯━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━ # │ name │ type │ readonly │ size │ created │ accessed │ modified ────┼──────────────────────────────┼───────────┼──────────┼─────────┼──────────────┼──────────────┼────────────── 0 │ Desktop │ Directory │ │ 4.1 KB │ 2 months ago │ 2 months ago │ 2 months ago 1 │ aur │ Directory │ │ 4.1 KB │ 4 hours ago │ 4 hours ago │ 4 hours ago .</description></item><item><title>date</title><link>https://nushell.sh/website_exploration/docs/commands/date/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/date/</guid><description>Use date to get the current date and time. Defaults to local timezone but you can get it in UTC too.
Flags --utc Returns the current date and time in UTC --local Returns the current date and time in your local timezone
Examples &amp;gt; date ━━━━━━┯━━━━━━━┯━━━━━┯━━━━━━┯━━━━━━━━┯━━━━━━━━┯━━━━━━━━━━ year │ month │ day │ hour │ minute │ second │ timezone ──────┼───────┼─────┼──────┼────────┼────────┼────────── 2019 │ 9 │ 30 │ 21 │ 52 │ 30 │ -03:00 ━━━━━━┷━━━━━━━┷━━━━━┷━━━━━━┷━━━━━━━━┷━━━━━━━━┷━━━━━━━━━━ &amp;gt; date --utc ━━━━━━┯━━━━━━━┯━━━━━┯━━━━━━┯━━━━━━━━┯━━━━━━━━┯━━━━━━━━━━ year │ month │ day │ hour │ minute │ second │ timezone ──────┼───────┼─────┼──────┼────────┼────────┼────────── 2019 │ 10 │ 1 │ 0 │ 52 │ 32 │ UTC ━━━━━━┷━━━━━━━┷━━━━━┷━━━━━━┷━━━━━━━━┷━━━━━━━━┷━━━━━━━━━━ &amp;gt; date --local ━━━━━━┯━━━━━━━┯━━━━━┯━━━━━━┯━━━━━━━━┯━━━━━━━━┯━━━━━━━━━━ year │ month │ day │ hour │ minute │ second │ timezone ──────┼───────┼─────┼──────┼────────┼────────┼────────── 2019 │ 9 │ 30 │ 21 │ 52 │ 34 │ -03:00 ━━━━━━┷━━━━━━━┷━━━━━┷━━━━━━┷━━━━━━━━┷━━━━━━━━┷━━━━━━━━━━</description></item><item><title>debug</title><link>https://nushell.sh/website_exploration/docs/commands/debug/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/debug/</guid><description>debug prints a debugging view of the table data. It is useful when you want to get the specific types of the data and while investigating errors.
Examples ❯ ls | first 2 | debug ───┬────────────────────────────────────────── # │ &amp;lt;value&amp;gt; ───┼────────────────────────────────────────── 0 │ (name=&amp;quot;.azure&amp;quot; │ type=&amp;quot;Dir&amp;quot; │ size=nothing │ modified=2020-02-09T05:31:39.950305440Z((B │ mdate)) 1 │ (name=&amp;quot;.cargo&amp;quot; │ type=&amp;quot;Dir&amp;quot; │ size=nothing │ modified=2020-01-06T05:45:30.933303081Z((B │ mdate)) ───┴────────────────────────────────────────── ❯ ls | last 8 | get type | debug ───┬───────── # │ &amp;lt;value&amp;gt; ───┼───────── 0 │ &amp;quot;Dir&amp;quot; 1 │ &amp;quot;Dir&amp;quot; 2 │ &amp;quot;File&amp;quot; 3 │ &amp;quot;Dir&amp;quot; 4 │ &amp;quot;File&amp;quot; 5 │ &amp;quot;Dir&amp;quot; 6 │ &amp;quot;Dir&amp;quot; 7 │ &amp;quot;Dir&amp;quot; ───┴───────── ❯ open --raw Cargo.</description></item><item><title>default</title><link>https://nushell.sh/website_exploration/docs/commands/default/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/default/</guid><description>This command sets a default row&amp;rsquo;s column if missing. Other commands are capable of feeding default with their output through pipelines.
Usage &amp;gt; [input-command] | default [column-name] [column-value] Examples Let&amp;rsquo;s say we have a table like this:
&amp;gt; open contacts.json ━━━┯━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━ # │ name │ email ───┼──────────┼────────────────── 0 │ paul │ paul@example.com 1 │ andres │ 2 │ jonathan │ ━━━┷━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━ default allows us to fill email column with a default value:</description></item><item><title>du</title><link>https://nushell.sh/website_exploration/docs/commands/du/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/du/</guid><description>du stands for disk usage. It will give you the physical and apparent size of files and folders
Examples &amp;gt; du src/commands ───┬──────────────┬──────────┬──────────┬──────────────── # │ path │ apparent │ physical │ directories ───┼──────────────┼──────────┼──────────┼──────────────── 0 │ src/commands │ 411.5 KB │ 647.2 KB │ [table 1 rows] ───┴──────────────┴──────────┴──────────┴──────────────── &amp;gt; du -a src/commands ───┬──────────────┬──────────┬──────────┬─────────────────┬──────────────── # │ path │ apparent │ physical │ files │ directories ───┼──────────────┼──────────┼──────────┼─────────────────┼──────────────── 0 │ src/commands │ 411.5 KB │ 647.</description></item><item><title>echo</title><link>https://nushell.sh/website_exploration/docs/commands/echo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/echo/</guid><description>Use echo to repeat arguments back to the user
Examples &amp;gt; echo Hello world Hello world &amp;gt; echo &amp;#34;Hello, world!&amp;#34; Hello, world!</description></item><item><title>edit</title><link>https://nushell.sh/website_exploration/docs/commands/edit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/edit/</guid><description>Edits an existing column on a table. First parameter is the column to edit and the second parameter is the value to put.
Examples &amp;gt; ls ━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━┯━━━━━━┯━━━━━━━━━━┯━━━━━━━━┯━━━━━━━━━━━┯━━━━━━━━━━━ # │ name │ type │ readonly │ size │ accessed │ modified ───┼────────────────────────────┼──────┼──────────┼────────┼───────────┼─────────── 0 │ zeusiscrazy.txt │ File │ │ 556 B │ a day ago │ a day ago 1 │ coww.txt │ File │ │ 24 B │ a day ago │ a day ago 2 │ randomweirdstuff.</description></item><item><title>enter</title><link>https://nushell.sh/website_exploration/docs/commands/enter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/enter/</guid><description>This command creates a new shell and begin at this path.
Examples /home/foobar&amp;gt; cat user.json { &amp;#34;Name&amp;#34;: &amp;#34;Peter&amp;#34;, &amp;#34;Age&amp;#34;: 30, &amp;#34;Telephone&amp;#34;: 88204828, &amp;#34;Country&amp;#34;: &amp;#34;Singapore&amp;#34; } /home/foobar&amp;gt; enter user.json /&amp;gt; ls ━━━━━━━┯━━━━━┯━━━━━━━━━━━┯━━━━━━━━━━━ Name │ Age │ Telephone │ Country ───────┼─────┼───────────┼─────────── Peter │ 30 │ 88204828 │ Singapore ━━━━━━━┷━━━━━┷━━━━━━━━━━━┷━━━━━━━━━━━ /&amp;gt; exit /home/foobar&amp;gt; It also provides the ability to work with multiple directories at the same time. This command will allow you to create a new &amp;ldquo;shell&amp;rdquo; and enter it at the specified path.</description></item><item><title>exit</title><link>https://nushell.sh/website_exploration/docs/commands/exit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/exit/</guid><description>Exits the nu shell. If you have multiple nu shells, use exit --now to exit all of them.
Examples &amp;gt; exit &amp;gt; shells ━━━┯━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ # │ │ name │ path ───┼───┼────────────┼───────────────────────────────────── 0 │ │ filesystem │ /home/jonathanturner/Source/nushell 1 │ │ filesystem │ /home 2 │ X │ filesystem │ /usr ━━━┷━━━┷━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ &amp;gt; exit &amp;gt; shells ━━━┯━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ # │ │ name │ path ───┼───┼────────────┼───────────────────────────────────── 0 │ │ filesystem │ /home/jonathanturner/Source/nushell 1 │ X │ filesystem │ /home ━━━┷━━━┷━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ &amp;gt; exit --now exits both the shells</description></item><item><title>fetch</title><link>https://nushell.sh/website_exploration/docs/commands/fetch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/fetch/</guid><description>This command loads from a URL into a cell, convert it to table if possible (avoid by appending --raw flag)
Examples &amp;gt; fetch http://headers.jsontest.com ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┯━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━ X-Cloud-Trace-Context │ Accept │ Host │ Content-Length │ user-agent ───────────────────────────────────────────────────────┼────────┼──────────────────────┼────────────────┼───────────────────────── aeee1a8abf08820f6fe19d114dc3bb87/16772233176633589121 │ */* │ headers.jsontest.com │ 0 │ curl/7.54.0 isahc/0.7.1 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┷━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━ &amp;gt; fetch http://headers.jsontest.com --raw { &amp;#34;X-Cloud-Trace-Context&amp;#34;: &amp;#34;aeee1a8abf08820f6fe19d114dc3bb87/16772233176633589121&amp;#34;, &amp;#34;Accept&amp;#34;: &amp;#34;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3&amp;#34;, &amp;#34;Upgrade-Insecure-Requests&amp;#34;: &amp;#34;1&amp;#34;, &amp;#34;User-Agent&amp;#34;: &amp;#34;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.</description></item><item><title>first</title><link>https://nushell.sh/website_exploration/docs/commands/first/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/first/</guid><description>Use first to retrieve the first &amp;ldquo;n&amp;rdquo; rows of a table. first has a required amount parameter that indicates how many rows you would like returned. If more than one row is returned, an index column will be included showing the row number.
Examples &amp;gt; ps | first 1 ━━━━━━━┯━━━━━━━━━━━━━━┯━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━ pid │ name │ status │ cpu ───────┼──────────────┼─────────┼─────────────────── 60358 │ nu_plugin_ps │ Running │ 5.399802999999999 ━━━━━━━┷━━━━━━━━━━━━━━┷━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━ &amp;gt; ps | first 5 ━━━┯━━━━━━━┯━━━━━━━━━━━━━━┯━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━ # │ pid │ name │ status │ cpu ───┼───────┼──────────────┼─────────┼─────────────────── 0 │ 60754 │ nu_plugin_ps │ Running │ 4.</description></item><item><title>format</title><link>https://nushell.sh/website_exploration/docs/commands/format/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/format/</guid><description>Format columns into a string using a simple pattern
Syntax: format &amp;lt;pattern&amp;gt;
Parameters &amp;lt;pattern&amp;gt;: the pattern to match Example Let&amp;rsquo;s say we have a table like this:
&amp;gt; open pets.csv ━━━┯━━━━━━━━━━━┯━━━━━━━━┯━━━━━ # │ animal │ name │ age ───┼───────────┼────────┼───── 0 │ cat │ Tom │ 7 1 │ dog │ Alfred │ 10 2 │ chameleon │ Linda │ 1 ━━━┷━━━━━━━━━━━┷━━━━━━━━┷━━━━━ format allows us to convert table data into a string by following a formatting pattern.</description></item><item><title>from</title><link>https://nushell.sh/website_exploration/docs/commands/from/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/from/</guid><description>Converts content (string or binary) into a table. The source format is specified as a subcommand, like from csv or from json.
Use this when nushell cannot determine the input file extension.
Available Subcommands from bson from csv from eml from ics from ini from json from ods from sqlite from ssv from toml from tsv from url from vcf from xlsx from xml from yaml Subcommands without links are currently missing their documentation.</description></item><item><title>from-csv</title><link>https://nushell.sh/website_exploration/docs/commands/from-csv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/from-csv/</guid><description>Converts csv data into table. Use this when nushell cannot determine the input file extension.
Example Let&amp;rsquo;s say we have the following file :
&amp;gt; cat pets.txt animal, name, age cat, Tom, 7 dog, Alfred, 10 chameleon, Linda, 1 pets.txt is actually a .csv file but it has the .txt extension, open is not able to convert it into a table :
&amp;gt; open pets.txt animal, name, age cat, Tom, 7 dog, Alfred, 10 chameleon, Linda, 1 To get a table from pets.</description></item><item><title>from-ics</title><link>https://nushell.sh/website_exploration/docs/commands/from-ics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/from-ics/</guid><description>Parse text as .ics and create table.
Syntax: from ics
Examples Suppose calendar.txt is a text file that is formatted like a .ics (iCal) file:
&amp;gt; open calendar.txt BEGIN:VCALENDAR BEGIN:VEVENT DTSTART:20171007T200000Z DTEND:20171007T233000Z DTSTAMP:20200319T182138Z SUMMARY:Basketball Game UID:4l80f6dcovnriq38g57g07btid@google.com ... Pass the output of the open command to from ics to get a correctly formatted table:
&amp;gt; open calendar.txt | from ics ───┬────────────────┬──────────────────┬────────────────┬────────────────┬────────────────┬────────────────┬──────────────── # │ properties │ events │ alarms │ to-Dos │ journals │ free-busys │ timezones ───┼────────────────┼──────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼──────────────── 0 │ [table 0 rows] │ [table 1 row] │ [table 0 rows] │ [table 0 rows] │ [table 0 rows] │ [table 0 rows] │ [table 0 rows] ───┴────────────────┴──────────────────┴────────────────┴────────────────┴────────────────┴────────────────┴──────────────── &amp;gt; open calendar.</description></item><item><title>from-json</title><link>https://nushell.sh/website_exploration/docs/commands/from-json/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/from-json/</guid><description>Parse text as .json and create table. Use this when nushell cannot dertermine the input file extension.
Syntax: from json {flags}
Flags: --objects treat each line as a separate value Examples &amp;gt; open command_from-json [ { title: &amp;#34;from json&amp;#34;, type: &amp;#34;command&amp;#34;, flags: true } ] &amp;gt; open command_from-json | from json ━━━━━━━━━━━┯━━━━━━━━━┯━━━━━━━ title │ type │ flags ───────────┼─────────┼─────── from json │ command │ Yes ━━━━━━━━━━━┷━━━━━━━━━┷━━━━━━━</description></item><item><title>from-ods</title><link>https://nushell.sh/website_exploration/docs/commands/from-ods/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/from-ods/</guid><description>Parses OpenDocument Spreadsheet binary data into a table. open calls from ods automatically when the file extension is ods. Use this command when open is unable to guess the file type from the extension.
Examples &amp;gt; open abc.ods ───────────────── Sheet1 ───────────────── [table 26 rows] ───────────────── &amp;gt; open abc.ods --raw Length: 4816 (0x12d0) bytes 0000: 50 4b 03 04 14 00 00 00 00 00 00 00 00 00 85 6c PK.</description></item><item><title>from-toml</title><link>https://nushell.sh/website_exploration/docs/commands/from-toml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/from-toml/</guid><description>Converts toml data into table. Use this when nushell cannot dertermine the input file extension.
Example Let&amp;rsquo;s say we have the following Rust .lock file :
&amp;gt; open Cargo.lock # This file is automatically @generated by Cargo. # It is not intended for manual editing. [[package]] name = &amp;#34;adler32&amp;#34; version = &amp;#34;1.0.3&amp;#34; source = &amp;#34;registry+https://github.com/rust-lang/crates.io-index&amp;#34; ... The &amp;ldquo;Cargo.lock&amp;rdquo; file is actually a .toml file, but the file extension isn&amp;rsquo;t .toml. That&amp;rsquo;s okay, we can use the from toml command :</description></item><item><title>from-tsv</title><link>https://nushell.sh/website_exploration/docs/commands/from-tsv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/from-tsv/</guid><description>Parse text as .tsv and create table.
Syntax: from tsv {flags}
Flags: --headerless don't treat the first row as column names Examples Let&amp;rsquo;s say we have the following file which is formatted like a tsv file:
&amp;gt; open elements.txt Symbol Element H Hydrogen He Helium Li Lithium Be Beryllium If we pass the output of the open command to from tsv we get a correct formatted table:
&amp;gt; open elements.</description></item><item><title>from-vcf</title><link>https://nushell.sh/website_exploration/docs/commands/from-vcf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/from-vcf/</guid><description>Parse text as .vcf and create table.
Syntax: from vcf
Examples Suppose contacts.txt is a text file that is formatted like a .vcf (vCard) file:
&amp;gt; open contacts.txt BEGIN:VCARD VERSION:3.0 FN:John Doe N:Doe;John;;; EMAIL;TYPE=INTERNET:john.doe99@gmail.com ... Pass the output of the open command to from vcf to get a correctly formatted table:
&amp;gt; open contacts.txt | from vcf ─────┬───────────────── # │ properties ─────┼───────────────── 0 │ [table 8 rows] &amp;gt; open contacts.txt | from vcf | get properties | where $it.</description></item><item><title>from-xlsx</title><link>https://nushell.sh/website_exploration/docs/commands/from-xlsx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/from-xlsx/</guid><description>Parses MS Excel binary data into a table. open calls from xlsx automatically when the file extension is xlsx. Use this command when open is unable to guess the file type from the extension.
Examples &amp;gt; open abc.xlsx ───────────────── Sheet1 ───────────────── [table 26 rows] ───────────────── &amp;gt; open abc.xlsx --raw Length: 6344 (0x18c8) bytes 0000: 50 4b 03 04 14 00 00 00 08 00 00 00 00 00 d5 5f PK.</description></item><item><title>from-xml</title><link>https://nushell.sh/website_exploration/docs/commands/from-xml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/from-xml/</guid><description>Parse text as .xml and create table. Use this when nushell cannot dertermine the input file extension.
Syntax: from xml
Examples Let&amp;rsquo;s say we&amp;rsquo;ve got a file in xml format but the file extension is different so Nu can&amp;rsquo;t auto-format it:
&amp;gt; open world.txt &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;world&amp;gt; &amp;lt;continent&amp;gt;Africa&amp;lt;/continent&amp;gt; &amp;lt;continent&amp;gt;Antarctica&amp;lt;/continent&amp;gt; &amp;lt;continent&amp;gt;Asia&amp;lt;/continent&amp;gt; &amp;lt;continent&amp;gt;Australia&amp;lt;/continent&amp;gt; &amp;lt;continent&amp;gt;Europe&amp;lt;/continent&amp;gt; &amp;lt;continent&amp;gt;North America&amp;lt;/continent&amp;gt; &amp;lt;continent&amp;gt;South America&amp;lt;/continent&amp;gt; &amp;lt;/world&amp;gt; We can use from xml to read the input like a xml file:</description></item><item><title>from-yaml</title><link>https://nushell.sh/website_exploration/docs/commands/from-yaml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/from-yaml/</guid><description>Parse text as .yaml/.yml and create table. Use this when nushell cannot determine the input file extension.
Syntax: from yaml
Examples &amp;gt; open command_from-yaml title: from-yaml type: command flags: false &amp;gt; open command_from-yaml | from yaml ━━━━━━━━━━━┯━━━━━━━━━┯━━━━━━━ title │ type │ flags ───────────┼─────────┼─────── from-yaml │ command │ No ━━━━━━━━━━━┷━━━━━━━━━┷━━━━━━━</description></item><item><title>get</title><link>https://nushell.sh/website_exploration/docs/commands/get/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/get/</guid><description>Open given cells as text.
Syntax: get ...args
Parameters: args: optionally return additional data by path Examples If we run sys we receive a table which contains tables itself:
&amp;gt; sys ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━ host │ cpu │ disks │ mem │ temp │ net │ battery ────────────────────────────────────────┼────────────────────────────────────┼────────────────┼───────────────────────────────────────┼────────────────┼────────────────┼──────────────── [row arch hostname name release uptime │ [row cores current ghz max ghz min │ [table 7 rows] │ [row free swap free swap total total] │ [table 6 rows] │ [table 3 rows] │ [table 1 rows] users] │ ghz] │ │ │ │ │ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━ To access one of the embedded tables we can use the get command</description></item><item><title>group-by</title><link>https://nushell.sh/website_exploration/docs/commands/group-by/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/group-by/</guid><description>This command creates a new table with the data from the table rows grouped by the column given.
Examples Let&amp;rsquo;s say we have this table of all countries in the world sorted by their population:
&amp;gt; open countries_by_population.json | from-json | first 10 ━━━┯━━━━━━┯━━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━┯━━━━━━━━ # │ rank │ country or area │ UN continental region │ UN statistical region │ population 2018 │ population 2019 │ change ───┼──────┼─────────────────┼───────────────────────┼───────────────────────┼─────────────────┼─────────────────┼──────── 0 │ 1 │ China │ Asia │ Eastern Asia │ 1,427,647,786 │ 1,433,783,686 │ +0.</description></item><item><title>help</title><link>https://nushell.sh/website_exploration/docs/commands/help/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/help/</guid><description>Use help for more information on a command. Use help commands to list all available commands. Use help &amp;lt;command name&amp;gt; to display help about a particular command.
Examples &amp;gt; help Welcome to Nushell. Here are some tips to help you get started. * help commands - list all available commands * help &amp;lt;command name&amp;gt; - display help about a particular command You can also learn more at https://www.nushell.sh/book/ &amp;gt; help commands ━━━━┯━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ # │ name │ description ────┼──────────────┼──────────────────────────────────────────────────────────────────────────────────────── 0 │ add │ Add a new field to the table.</description></item><item><title>histogram</title><link>https://nushell.sh/website_exploration/docs/commands/histogram/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/histogram/</guid><description>Creates a new table with a histogram based on the column name passed in.
Syntax: histogram &amp;lt;column_name&amp;gt; ...args
Parameters &amp;lt;column-name&amp;gt;: name of the column to graph by args: column name to give the histogram&amp;rsquo;s frequency column Examples Let&amp;rsquo;s say we have this file random_numers.csv which contains 50 random numbers.
Note: The input doesn&amp;rsquo;t have to be numbers it works on strings too. Try it out.
&amp;gt; open random_numbers.csv open random_numbers2.</description></item><item><title>history</title><link>https://nushell.sh/website_exploration/docs/commands/history/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/history/</guid><description>Displays the last 100 commands.
Example &amp;gt; history ━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ # │ &amp;lt;value&amp;gt; ────┼─────────────────────────────────────────────────────────────────────────── ... 97 │ ls 98 │ ls | where accessed &amp;lt; 1d 99 │ cd ━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</description></item><item><title>inc</title><link>https://nushell.sh/website_exploration/docs/commands/inc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/inc/</guid><description>This command increments the value of variable by one.
Examples &amp;gt; open rustfmt.toml ━━━━━━━━━ edition ───────── 2018 ━━━━━━━━━ &amp;gt; open rustfmt.toml | inc edition ━━━━━━━━━ edition ───────── 2019 ━━━━━━━━━ &amp;gt; open Cargo.toml | get package.version 0.1.3 &amp;gt; open Cargo.toml | inc package.version --major | get package.version 1.0.0 &amp;gt; open Cargo.toml | inc package.version --minor | get package.version 0.2.0 &amp;gt; open Cargo.toml | inc package.version --patch | get package.version 0.1.4</description></item><item><title>insert</title><link>https://nushell.sh/website_exploration/docs/commands/insert/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/insert/</guid><description>This command adds a column to any table output. The first parameter takes the heading, the second parameter takes the value for all the rows.
Examples &amp;gt; ls | insert is_on_a_computer yes_obviously ━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━┯━━━━━━┯━━━━━━━━━━┯━━━━━━━━┯━━━━━━━━━━━┯━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━ # │ name │ type │ readonly │ size │ accessed │ modified │ is_on_a_computer ───┼────────────────────────────┼──────┼──────────┼────────┼───────────┼───────────┼────────────────── 0 │ zeusiscrazy.txt │ File │ │ 556 B │ a day ago │ a day ago │ yes_obviously 1 │ coww.</description></item><item><title>last</title><link>https://nushell.sh/website_exploration/docs/commands/last/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/last/</guid><description>Use last to retrieve the last &amp;ldquo;n&amp;rdquo; rows of a table. last has a required amount parameter that indicates how many rows you would like returned. If more than one row is returned, an index column will be included showing the row number. last does not alter the order of the rows of the table.
Examples &amp;gt; ps | last 1 ━━━━━┯━━━━━━━━━━━━━┯━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━ pid │ name │ status │ cpu ─────┼─────────────┼─────────┼─────────────────── 121 │ loginwindow │ Running │ 0.</description></item><item><title>lines</title><link>https://nushell.sh/website_exploration/docs/commands/lines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/lines/</guid><description>This command takes a string from a pipeline as input, and returns a table where each line of the input string is a row in the table. Empty lines are ignored. This command is capable of feeding other commands, such as nth, with its output.
Usage &amp;gt; [input-command] | lines Examples Basic usage:
&amp;gt; printf &amp;#34;Hello\nWorld!\nLove, nushell.&amp;#34; | lines ━━━┯━━━━━━━━━━━━━━━━ # │ value ───┼──────────────── 0 │ Hello 1 │ World! 2 │ Love, nushell.</description></item><item><title>nth</title><link>https://nushell.sh/website_exploration/docs/commands/nth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/nth/</guid><description>This command returns the nth row of a table, starting from 0. If the number given is less than 0 or more than the number of rows, nothing is returned.
Usage &amp;gt; [input-command] | nth &amp;lt;row number&amp;gt; ...args Parameters: &amp;lt;row number&amp;gt; the number of the row to return args: Optionally return more rows Examples &amp;gt; ls ━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━┯━━━━━━━━━━┯━━━━━━━━┯━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━ # │ name │ type │ readonly │ size │ accessed │ modified ───┼────────────┼───────────┼──────────┼────────┼───────────────┼─────────────── 0 │ Cargo.</description></item><item><title>open</title><link>https://nushell.sh/website_exploration/docs/commands/open/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/open/</guid><description>Loads a file into a cell, convert it to table if possible (avoid by appending --raw flag)
Flags --raw Load the file without attempting to convert it into a table Example &amp;gt; cat user.yaml - Name: Peter Age: 30 Telephone: 88204828 Country: Singapore - Name: Michael Age: 42 Telephone: 44002010 Country: Spain - Name: Will Age: 50 Telephone: 99521080 Country: Germany &amp;gt; open user.yaml ━━━┯━━━━━━━━━┯━━━━━┯━━━━━━━━━━━┯━━━━━━━━━━━ # │ Name │ Age │ Telephone │ Country ───┼─────────┼─────┼───────────┼─────────── 0 │ Peter │ 30 │ 88204828 │ Singapore 1 │ Michael │ 42 │ 44002010 │ Spain 2 │ Will │ 50 │ 99521080 │ Germany ━━━┷━━━━━━━━━┷━━━━━┷━━━━━━━━━━━┷━━━━━━━━━━━ &amp;gt; open user.</description></item><item><title>pick</title><link>https://nushell.sh/website_exploration/docs/commands/pick/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/pick/</guid><description>This command displays only the column names passed on to it.
Examples &amp;gt; ls ━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━┯━━━━━━┯━━━━━━━━━━┯━━━━━━━━┯━━━━━━━━━━━━━┯━━━━━━━━━━━━━┯━━━━━━━━━━━━━ # │ name │ type │ readonly │ size │ created │ accessed │ modified ───┼────────────────────────────┼──────┼──────────┼────────┼─────────────┼─────────────┼───────────── 0 │ zeusiscrazy.txt │ File │ │ 556 B │ a month ago │ a month ago │ a month ago 1 │ coww.txt │ File │ │ 24 B │ a month ago │ a month ago │ a month ago 2 │ randomweirdstuff.</description></item><item><title>pivot</title><link>https://nushell.sh/website_exploration/docs/commands/pivot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/pivot/</guid><description>Pivots the table contents so rows become columns and columns become rows.
Examples &amp;gt; ls docs ━━━┯━━━━━━━━━━━━━━━━━━━━┯━━━━━━━━━━━┯━━━━━━━━━━┯━━━━━━━━┯━━━━━━━━━━━━━┯━━━━━━━━━━━━━ # │ name │ type │ readonly │ size │ accessed │ modified ───┼────────────────────┼───────────┼──────────┼────────┼─────────────┼───────────── 0 │ docs/commands │ Directory │ │ 4.1 KB │ an hour ago │ an hour ago 1 │ docs/docker.md │ File │ │ 7.0 KB │ an hour ago │ a day ago 2 │ docs/philosophy.md │ File │ │ 896 B │ an hour ago │ a day ago ━━━┷━━━━━━━━━━━━━━━━━━━━┷━━━━━━━━━━━┷━━━━━━━━━━┷━━━━━━━━┷━━━━━━━━━━━━━┷━━━━━━━━━━━━━ &amp;gt; ls docs | pivot ━━━┯━━━━━━━━━━┯━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━ # │ Column0 │ Column1 │ Column2 │ Column3 ───┼──────────┼───────────────┼────────────────┼──────────────────── 0 │ name │ docs/commands │ docs/docker.</description></item><item><title>prepend</title><link>https://nushell.sh/website_exploration/docs/commands/prepend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/prepend/</guid><description>This command prepends the given row to the front of the table
Note:
prepend does not change a file itself. If you want to save your changes, you need to run the save command if you want to add something containing a whitespace character, you need to put it in quotation marks Examples Let&amp;rsquo;s complete this table with the missing continents:
&amp;gt; open continents.txt | lines ━━━┯━━━━━━━━━━━━━━━ # │ &amp;lt;value&amp;gt; ───┼─────────────── 0 │ Africa 1 │ South America 2 │ Australia 3 │ Europe 4 │ Antarctica ━━━┷━━━━━━━━━━━━━━━ You can add a new row at the top by using prepend:</description></item><item><title>ps</title><link>https://nushell.sh/website_exploration/docs/commands/ps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/ps/</guid><description>This command shows information about system processes.
Syntax: ps
Example &amp;gt; ps ... ━━━━┯━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┯━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━ # │ pid │ name │ status │ cpu ────┼───────┼────────────────────────────────────────────────────────────────────┼─────────┼─────────────────── 50 │ 10184 │ firefox.exe │ Running │ 0.000000000000000 51 │ 11584 │ WindowsTerminal.exe │ Running │ 0.000000000000000 52 │ 11052 │ conhost.exe │ Running │ 0.000000000000000 53 │ 7076 │ nu.exe │ Running │ 0.000000000000000 ... 66 │ 3000 │ Code.exe │ Running │ 0.000000000000000 67 │ 5388 │ conhost.</description></item><item><title>reject</title><link>https://nushell.sh/website_exploration/docs/commands/reject/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/reject/</guid><description>This command removes or rejects the columns passed to it.
Examples &amp;gt; ls ━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━┯━━━━━━┯━━━━━━━━━━┯━━━━━━━━┯━━━━━━━━━━━━━┯━━━━━━━━━━━━━┯━━━━━━━━━━━━━ # │ name │ type │ readonly │ size │ created │ accessed │ modified ───┼────────────────────────────┼──────┼──────────┼────────┼─────────────┼─────────────┼───────────── 0 │ zeusiscrazy.txt │ File │ │ 556 B │ a month ago │ a month ago │ a month ago 1 │ coww.txt │ File │ │ 24 B │ a month ago │ a month ago │ a month ago 2 │ randomweirdstuff.</description></item><item><title>reverse</title><link>https://nushell.sh/website_exploration/docs/commands/reverse/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/reverse/</guid><description>This command reverses the order of the elements in a sorted table.
Examples &amp;gt; ls | sort-by name ━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━┯━━━━━━┯━━━━━━━━━━┯━━━━━━━━┯━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━ # │ name │ type │ readonly │ size │ accessed │ modified ───┼────────────────────────────┼──────┼──────────┼────────┼────────────────┼──────────────── 0 │ abaracadabra.txt │ File │ │ 401 B │ 23 minutes ago │ 16 minutes ago 1 │ coww.txt │ File │ │ 24 B │ 22 minutes ago │ 17 minutes ago 2 │ randomweirdstuff.txt │ File │ │ 197 B │ 21 minutes ago │ 18 minutes ago 3 │ youshouldeatmorecereal.</description></item><item><title>save</title><link>https://nushell.sh/website_exploration/docs/commands/save/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/save/</guid><description>This command saves the contents of the pipeline to a file. Use this in combination with the to-json, to-csv, &amp;hellip; commands to save the contents in the specified format.
Syntax: save (path) {flags}
Parameters (path) the path to save contents to Flags --raw Treat values as-is rather than auto-converting based on file extension Example You can save the name of files in a directory like this:</description></item><item><title>select</title><link>https://nushell.sh/website_exploration/docs/commands/select/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/select/</guid><description>This command displays only the column names passed on to it.
Examples &amp;gt; ls ━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━┯━━━━━━┯━━━━━━━━━━┯━━━━━━━━┯━━━━━━━━━━━━━┯━━━━━━━━━━━━━┯━━━━━━━━━━━━━ # │ name │ type │ readonly │ size │ created │ accessed │ modified ───┼────────────────────────────┼──────┼──────────┼────────┼─────────────┼─────────────┼───────────── 0 │ zeusiscrazy.txt │ File │ │ 556 B │ a month ago │ a month ago │ a month ago 1 │ coww.txt │ File │ │ 24 B │ a month ago │ a month ago │ a month ago 2 │ randomweirdstuff.</description></item><item><title>shells</title><link>https://nushell.sh/website_exploration/docs/commands/shells/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/shells/</guid><description>Lists all the active nu shells with a number/index, a name and the path. Also marks the current nu shell.
Examples &amp;gt; shells ━━━┯━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ # │ │ name │ path ───┼───┼────────────┼───────────────────────────────────── 0 │ │ filesystem │ /home/jonathanturner/Source/nushell 1 │ │ filesystem │ /usr 2 │ X │ filesystem │ /home ━━━┷━━━┷━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ /&amp;gt; shells ━━━┯━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ # │ │ name │ path ───┼───┼──────────────────────────────────────────────────┼───────────────────────────────────── 0 │ │ filesystem │ /home/jonathanturner/Source/nushell 1 │ X │ {/home/jonathanturner/Source/nushell/Cargo.</description></item><item><title>size</title><link>https://nushell.sh/website_exploration/docs/commands/size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/size/</guid><description>This commands gives word count statistics on any text.
Examples &amp;gt; open lalala.txt | size ━━━━━━━┯━━━━━━━┯━━━━━━━┯━━━━━━━━━━━━ lines │ words │ chars │ max length ───────┼───────┼───────┼──────────── 4 │ 10 │ 72 │ 72 ━━━━━━━┷━━━━━━━┷━━━━━━━┷━━━━━━━━━━━━ &amp;gt; open the_mysterious_affair_at_styles.txt | size ━━━━━━━┯━━━━━━━┯━━━━━━━━┯━━━━━━━━━━━━ lines │ words │ chars │ max length ───────┼───────┼────────┼──────────── 8935 │ 62352 │ 349459 │ 361771 ━━━━━━━┷━━━━━━━┷━━━━━━━━┷━━━━━━━━━━━━</description></item><item><title>skip</title><link>https://nushell.sh/website_exploration/docs/commands/skip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/skip/</guid><description>Skips the first &amp;lsquo;n&amp;rsquo; rows of a table.
Usage &amp;gt; [input-command] | skip (n) Examples If we open a file with a list of contacts, we get all of the contacts.
&amp;gt; open contacts.csv ───┬─────────┬──────┬───────────────── # │ first │ last │ email ───┼─────────┼──────┼───────────────── 0 │ John │ Doe │ doe.1@email.com 1 │ Jane │ Doe │ doe.2@email.com 2 │ Chris │ Doe │ doe.3@email.com 3 │ Francis │ Doe │ doe.</description></item><item><title>skip-while</title><link>https://nushell.sh/website_exploration/docs/commands/skip-while/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/skip-while/</guid><description>Skips rows while the condition matches.
Usage &amp;gt; [input-command] | skip-while &amp;lt;condition&amp;gt; Examples If we open a file with a list of contacts, we get all of the contacts.
&amp;gt; open contacts.csv | sort-by &amp;#34;last name&amp;#34; ───┬────────────┬───────────┬────────────────── # │ first name │ last name │ email ───┼────────────┼───────────┼────────────────── 0 │ John │ Abbot │ abbot@email.com 1 │ Chris │ Beasly │ beasly@email.com 2 │ Jane │ Carver │ carver@email.com 3 │ Francis │ Davis │ davis@email.</description></item><item><title>sort-by</title><link>https://nushell.sh/website_exploration/docs/commands/sort-by/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/sort-by/</guid><description>The sort-by command sorts the table being displayed in the terminal by a chosen column(s).
sort-by takes multiple arguments (being the names of columns) sorting by each argument in order.
Examples - /home/example&amp;gt; ls | sort-by size ━━━┯━━━━━━┯━━━━━━┯━━━━━━━━━━┯━━━━━━━━┯━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━ # │ name │ type │ readonly │ size │ accessed │ modified ───┼──────┼──────┼──────────┼────────┼────────────────┼──────────────── 0 │ az │ File │ │ 18 B │ 4 minutes ago │ 4 minutes ago 1 │ a │ File │ │ 18 B │ 4 minutes ago │ 38 minutes ago 2 │ ad │ File │ │ 18 B │ 4 minutes ago │ 4 minutes ago 3 │ ac │ File │ │ 18 B │ 4 minutes ago │ 4 minutes ago 4 │ ab │ File │ │ 18 B │ 4 minutes ago │ 4 minutes ago 5 │ c │ File │ │ 102 B │ 35 minutes ago │ 35 minutes ago 6 │ d │ File │ │ 189 B │ 35 minutes ago │ 34 minutes ago 7 │ b │ File │ │ 349 B │ 35 minutes ago │ 35 minutes ago ━━━┷━━━━━━┷━━━━━━┷━━━━━━━━━━┷━━━━━━━━┷━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━ /home/example&amp;gt; ls | sort-by size name ━━━┯━━━━━━┯━━━━━━┯━━━━━━━━━━┯━━━━━━━━┯━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━ # │ name │ type │ readonly │ size │ accessed │ modified ───┼──────┼──────┼──────────┼────────┼────────────────┼──────────────── 0 │ a │ File │ │ 18 B │ 4 minutes ago │ 39 minutes ago 1 │ ab │ File │ │ 18 B │ 4 minutes ago │ 4 minutes ago 2 │ ac │ File │ │ 18 B │ 4 minutes ago │ 4 minutes ago 3 │ ad │ File │ │ 18 B │ 4 minutes ago │ 4 minutes ago 4 │ az │ File │ │ 18 B │ 4 minutes ago │ 4 minutes ago 5 │ c │ File │ │ 102 B │ 36 minutes ago │ 35 minutes ago 6 │ d │ File │ │ 189 B │ 35 minutes ago │ 35 minutes ago 7 │ b │ File │ │ 349 B │ 36 minutes ago │ 36 minutes ago /home/example&amp;gt; ls | sort-by accessed ━━━┯━━━━━━┯━━━━━━┯━━━━━━━━━━┯━━━━━━━━┯━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━ # │ name │ type │ readonly │ size │ accessed │ modified ───┼──────┼──────┼──────────┼────────┼────────────────┼──────────────── 0 │ b │ File │ │ 349 B │ 37 minutes ago │ 37 minutes ago 1 │ c │ File │ │ 102 B │ 37 minutes ago │ 37 minutes ago 2 │ d │ File │ │ 189 B │ 37 minutes ago │ 36 minutes ago 3 │ a │ File │ │ 18 B │ 6 minutes ago │ 40 minutes ago 4 │ ab │ File │ │ 18 B │ 6 minutes ago │ 6 minutes ago 5 │ ac │ File │ │ 18 B │ 6 minutes ago │ 6 minutes ago 6 │ ad │ File │ │ 18 B │ 5 minutes ago │ 5 minutes ago 7 │ az │ File │ │ 18 B │ 5 minutes ago │ 5 minutes ago ━━━┷━━━━━━┷━━━━━━┷━━━━━━━━━━┷━━━━━━━━┷━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━</description></item><item><title>split-column</title><link>https://nushell.sh/website_exploration/docs/commands/split-column/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/split-column/</guid><description>Split row contents across multiple columns via the separator.
Syntax: split-column &amp;lt;separator&amp;gt; ...args{flags}
Parameters &amp;lt;separator&amp;gt;: string that denotes what separates columns args: column names to give the new columns. If not specified they will be set to Column1 Column2 &amp;hellip; Flags --collapse-empty Removes empty columns Examples If we have file structured like this:
0.12643678160919541 | 0.6851851851851852 | 0.273972602739726 0.28735632183908044 | 0.09259259259259259 | 0.6986301369863014 0.8045977011494253 | 0.8148148148148148 | 0.</description></item><item><title>split-row</title><link>https://nushell.sh/website_exploration/docs/commands/split-row/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/split-row/</guid><description>Split row contents over multiple rows via the separator.
Syntax: split-row &amp;lt;separator&amp;gt;
Parameters: &amp;lt;separator&amp;gt; the character that denotes what separates rows Examples We can build a table from a file that looks like this
&amp;gt; open table.txt 4, 0, 2, 0, 7, 8 using the split-row command.
open table.txt | split-row &amp;#34;, &amp;#34; ━━━┯━━━━━━━━━ # │ &amp;lt;value&amp;gt; ───┼───────── 0 │ 4 1 │ 0 2 │ 2 3 │ 0 4 │ 7 5 │ 8 ━━━┷━━━━━━━━━</description></item><item><title>str</title><link>https://nushell.sh/website_exploration/docs/commands/str/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/str/</guid><description>Consumes either a single value or a table and converts the provided data to a string and optionally applies a change.
Examples &amp;gt; shells ━━━┯━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ # │ │ name │ path ───┼───┼────────────┼──────────────────────────────── 0 │ X │ filesystem │ /home/TUX/stuff/expr/stuff 1 │ │ filesystem │ / ━━━┷━━━┷━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ &amp;gt; shells | str path --upcase ━━━┯━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ # │ │ name │ path ───┼───┼────────────┼──────────────────────────────── 0 │ X │ filesystem │ /HOME/TUX/STUFF/EXPR/STUFF 1 │ │ filesystem │ / ━━━┷━━━┷━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ &amp;gt; shells | str path --downcase ━━━┯━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ # │ │ name │ path ───┼───┼────────────┼──────────────────────────────── 0 │ X │ filesystem │ /home/tux/stuff/expr/stuff 1 │ │ filesystem │ / ━━━┷━━━┷━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ &amp;gt; shells | str # --substring &amp;#34;21, 99&amp;#34; ━━━┯━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ # │ │ name │ path ───┼───┼────────────┼──────────────────────────────── 0 │ X │ filesystem │ stuff 1 │ │ filesystem │ ━━━┷━━━┷━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ &amp;gt; shells | str # --substring &amp;#34;6,&amp;#34; ━━━┯━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ # │ │ name │ path ───┼───┼────────────┼──────────────────────────────── 0 │ X │ filesystem │ TUX/stuff/expr/stuff 1 │ │ filesystem │ ━━━┷━━━┷━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ &amp;gt; echo &amp;#34;1, 2, 3&amp;#34; | split-row &amp;#34;,&amp;#34; | str --to-int | sum ━━━━━━━━━ &amp;lt;value&amp;gt; ───────── 6 ━━━━━━━━━ &amp;gt; echo &amp;#34;nu&amp;#34; | str --capitalize ━━━━━━━━━ &amp;lt;value&amp;gt; ───────── Nu ━━━━━━━━━ &amp;gt; echo &amp;#34;Nu &amp;#34; | str --trim ━━━━━━━━━ &amp;lt;value&amp;gt; ───────── Nu ━━━━━━━━━ &amp;gt; shells | str path --find-replace [&amp;#34;TUX&amp;#34; &amp;#34;skipper&amp;#34;] ━━━┯━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ # │ │ name │ path ───┼───┼────────────┼──────────────────────────────── 0 │ X │ filesystem │ /home/skipper/stuff/expr/stuff 1 │ │ filesystem │ / ━━━┷━━━┷━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</description></item><item><title>sum</title><link>https://nushell.sh/website_exploration/docs/commands/sum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/sum/</guid><description>This command allows you to calculate the sum of values in a column.
Examples To get the sum of the file sizes in a directory, simply pipe the size column from the ls command to the sum command.
&amp;gt; ls | get size | sum ━━━━━━━━━ value ━━━━━━━━━ 51.0 MB ━━━━━━━━━ To get the sum of the characters that make up your present working directory.
&amp;gt; pwd | split-row / | size | get chars | sum ━━━━━━━━━ &amp;lt;value&amp;gt; ━━━━━━━━━ 21 ━━━━━━━━━ Note that sum only works for integer and byte values.</description></item><item><title>sys</title><link>https://nushell.sh/website_exploration/docs/commands/sys/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/sys/</guid><description>This command gives information about the system nu is running on.
Examples &amp;gt; sys ━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━ host │ cpu │ disks │ mem │ net │ battery ────────────────┼────────────────┼─────────────────┼────────────────┼──────────────────┼──────────────── [table: 1 row] │ [table: 1 row] │ [table: 3 rows] │ [table: 1 row] │ [table: 18 rows] │ [table: 1 row] ━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━ &amp;gt; sys | get host ━━━━━━━━┯━━━━━━━━━┯━━━━━━━━━━━━━━┯━━━━━━━━┯━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━ name │ release │ hostname │ arch │ uptime │ sessions ────────┼─────────┼──────────────┼────────┼────────────────┼────────────────── Darwin │ 18.</description></item><item><title>tags</title><link>https://nushell.sh/website_exploration/docs/commands/tags/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/tags/</guid><description>The tags commands allows users to access the metadata of the previous value in the pipeline. This command may be run on multiple values of input as well.
As of writing this, the only metadata returned includes:
span: the start and end indices of the previous value&amp;rsquo;s substring location anchor: the source where data was loaded from; this may not appear if the previous pipeline value didn&amp;rsquo;t actually have a source (like trying to open a dir, or running ls on a dir) Examples &amp;gt; open README.</description></item><item><title>to</title><link>https://nushell.sh/website_exploration/docs/commands/to/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/to/</guid><description>Converts table data into a string or binary. The target format is specified as a subcommand, like to csv or to json.
Available Subcommands to bson to csv to html to json to md to sqlite to toml to tsv to url to yaml Subcommands without links are currently missing their documentation.
Example &amp;gt; shells ━━━┯━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━ # │ │ name │ path ───┼───┼────────────┼──────────────────────── 0 │ X │ filesystem │ /home/shaurya 1 │ │ filesystem │ /home/shaurya/Pictures 2 │ │ filesystem │ /home/shaurya/Desktop ━━━┷━━━┷━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━ &amp;gt; shells | to csv ,name,path X,filesystem,/home/shaurya ,filesystem,/home/shaurya/Pictures ,filesystem,/home/shaurya/Desktop &amp;gt; open sample.</description></item><item><title>to-csv</title><link>https://nushell.sh/website_exploration/docs/commands/to-csv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/to-csv/</guid><description>Converts table data into csv text.
Example &amp;gt; shells ━━━┯━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━ # │ │ name │ path ───┼───┼────────────┼──────────────────────── 0 │ X │ filesystem │ /home/shaurya 1 │ │ filesystem │ /home/shaurya/Pictures 2 │ │ filesystem │ /home/shaurya/Desktop ━━━┷━━━┷━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━ &amp;gt; shells | to csv ,name,path X,filesystem,/home/shaurya ,filesystem,/home/shaurya/Pictures ,filesystem,/home/shaurya/Desktop &amp;gt; open caco3_plastics.csv ━━━┯━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━┯━━━━━━━━━━━━━┯━━━━━━━━━━━━━━┯━━━━━━━━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━┯━━━━━━━━━━━┯━━━━━━━━━━━━━━ # │ importer │ shipper │ tariff_item │ name │ origin │ shipped_at │ arrived_at │ net_weight │ fob_price │ cif_price │ cif_per_net_ │ │ │ │ │ │ │ │ │ │ │ weight ───┼──────────────┼──────────────┼─────────────┼──────────────┼──────────┼────────────┼────────────┼────────────┼───────────┼───────────┼────────────── 0 │ PLASTICOS │ S A REVERTE │ 2509000000 │ CARBONATO DE │ SPAIN │ 18/03/2016 │ 17/04/2016 │ 81,000.</description></item><item><title>to-json</title><link>https://nushell.sh/website_exploration/docs/commands/to-json/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/to-json/</guid><description>Converts table data into json text.
Example &amp;gt; shells ━━━┯━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━ # │ │ name │ path ───┼───┼────────────┼──────────────────────── 0 │ X │ filesystem │ /home/shaurya 1 │ │ filesystem │ /home/shaurya/Pictures 2 │ │ filesystem │ /home/shaurya/Desktop ━━━┷━━━┷━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━ &amp;gt; shells | to json [{&amp;#34; &amp;#34;:&amp;#34;X&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;filesystem&amp;#34;,&amp;#34;path&amp;#34;:&amp;#34;/home/shaurya&amp;#34;},{&amp;#34; &amp;#34;:&amp;#34; &amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;filesystem&amp;#34;,&amp;#34;path&amp;#34;:&amp;#34;/home/shaurya/Pictures&amp;#34;},{&amp;#34; &amp;#34;:&amp;#34; &amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;filesystem&amp;#34;,&amp;#34;path&amp;#34;:&amp;#34;/home/shaurya/Desktop&amp;#34;}] &amp;gt; open sgml_description.json ━━━━━━━━━━━━━━━━ glossary ──────────────── [table: 1 row] ━━━━━━━━━━━━━━━━ &amp;gt; open sgml_description.json | to json {&amp;#34;glossary&amp;#34;:{&amp;#34;title&amp;#34;:&amp;#34;example glossary&amp;#34;,&amp;#34;GlossDiv&amp;#34;:{&amp;#34;title&amp;#34;:&amp;#34;S&amp;#34;,&amp;#34;GlossList&amp;#34;:{&amp;#34;GlossEntry&amp;#34;:{&amp;#34;ID&amp;#34;:&amp;#34;SGML&amp;#34;,&amp;#34;SortAs&amp;#34;:&amp;#34;SGML&amp;#34;,&amp;#34;GlossTerm&amp;#34;:&amp;#34;Standard Generalized Markup Language&amp;#34;,&amp;#34;Acronym&amp;#34;:&amp;#34;SGML&amp;#34;,&amp;#34;Abbrev&amp;#34;:&amp;#34;ISO 8879:1986&amp;#34;,&amp;#34;Height&amp;#34;:10,&amp;#34;GlossDef&amp;#34;:{&amp;#34;para&amp;#34;:&amp;#34;A meta-markup language, used to create markup languages such as DocBook.</description></item><item><title>to-toml</title><link>https://nushell.sh/website_exploration/docs/commands/to-toml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/to-toml/</guid><description>Converts table data into toml text.
Example &amp;gt; shells ━━━┯━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━ # │ │ name │ path ───┼───┼────────────┼──────────────────────── 0 │ X │ filesystem │ /home/shaurya 1 │ │ filesystem │ /home/shaurya/Pictures 2 │ │ filesystem │ /home/shaurya/Desktop ━━━┷━━━┷━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━ &amp;gt; shells | to toml [[]] &amp;#34; &amp;#34; = &amp;#34;X&amp;#34; name = &amp;#34;filesystem&amp;#34; path = &amp;#34;/home/shaurya&amp;#34; [[]] &amp;#34; &amp;#34; = &amp;#34; &amp;#34; name = &amp;#34;filesystem&amp;#34; path = &amp;#34;/home/shaurya/Pictures&amp;#34; [[]] &amp;#34; &amp;#34; = &amp;#34; &amp;#34; name = &amp;#34;filesystem&amp;#34; path = &amp;#34;/home/shaurya/Desktop&amp;#34; &amp;gt; open cargo_sample.</description></item><item><title>to-tsv</title><link>https://nushell.sh/website_exploration/docs/commands/to-tsv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/to-tsv/</guid><description>Converts table data into tsv text.
Example &amp;gt; shells ━━━┯━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━ # │ │ name │ path ───┼───┼────────────┼──────────────────────── 0 │ X │ filesystem │ /home/shaurya 1 │ │ filesystem │ /home/shaurya/Pictures 2 │ │ filesystem │ /home/shaurya/Desktop ━━━┷━━━┷━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━ &amp;gt; shells | to tsv name path X filesystem /home/shaurya &amp;gt; open caco3_plastics.tsv ━━━┯━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━┯━━━━━━━━━━━━━┯━━━━━━━━━━━━━━┯━━━━━━━━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━┯━━━━━━━━━━━┯━━━━━━━━━━━━━━ # │ importer │ shipper │ tariff_item │ name │ origin │ shipped_at │ arrived_at │ net_weight │ fob_price │ cif_price │ cif_per_net_ │ │ │ │ │ │ │ │ │ │ │ weight ───┼──────────────┼──────────────┼─────────────┼──────────────┼──────────┼────────────┼────────────┼────────────┼───────────┼───────────┼────────────── 0 │ PLASTICOS │ S A REVERTE │ 2509000000 │ CARBONATO DE │ SPAIN │ 18/03/2016 │ 17/04/2016 │ 81,000.</description></item><item><title>to-url</title><link>https://nushell.sh/website_exploration/docs/commands/to-url/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/to-url/</guid><description>Converts table data into url-formatted text.
Example &amp;gt; shells ━━━┯━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━ # │ │ name │ path ───┼───┼────────────┼──────────────────────── 0 │ X │ filesystem │ /home/shaurya 1 │ │ filesystem │ /home/shaurya/Pictures 2 │ │ filesystem │ /home/shaurya/Desktop ━━━┷━━━┷━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━ &amp;gt; shells | to url ━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ # │ value ───┼─────────────────────────────────────────────────────── 0 │ +=X&amp;amp;name=filesystem&amp;amp;path=%2Fhome%2Fshaurya 1 │ +=+&amp;amp;name=filesystem&amp;amp;path=%2Fhome%2Fshaurya%2FPictures 2 │ +=+&amp;amp;name=filesystem&amp;amp;path=%2Fhome%2Fshaurya%2FDesktop ━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ &amp;gt; open sample.url ━━━━━━━━━━┯━━━━━━━━┯━━━━━━┯━━━━━━━━ bread │ cheese │ meat │ fat ──────────┼────────┼──────┼──────── baguette │ comté │ ham │ butter ━━━━━━━━━━┷━━━━━━━━┷━━━━━━┷━━━━━━━━ &amp;gt; open sample.</description></item><item><title>to-yaml</title><link>https://nushell.sh/website_exploration/docs/commands/to-yaml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/to-yaml/</guid><description>Converts table data into yaml text.
Example &amp;gt; shells ━━━┯━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━ # │ │ name │ path ───┼───┼────────────┼──────────────────────── 0 │ X │ filesystem │ /home/shaurya 1 │ │ filesystem │ /home/shaurya/Pictures 2 │ │ filesystem │ /home/shaurya/Desktop ━━━┷━━━┷━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━ &amp;gt; shells | to yaml --- - &amp;#34; &amp;#34;: X name: filesystem path: /home/shaurya - &amp;#34; &amp;#34;: &amp;#34; &amp;#34; name: filesystem path: /home/shaurya/Pictures - &amp;#34; &amp;#34;: &amp;#34; &amp;#34; name: filesystem path: /home/shaurya/Desktop &amp;gt; open appveyor.</description></item><item><title>trim</title><link>https://nushell.sh/website_exploration/docs/commands/trim/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/trim/</guid><description>Trim leading and following whitespace from text data
Example &amp;gt; echo &amp;#34; Hello world&amp;#34; Hello world &amp;gt; echo &amp;#34; Hello world&amp;#34; | trim Hello world</description></item><item><title>uniq</title><link>https://nushell.sh/website_exploration/docs/commands/uniq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/uniq/</guid><description>Returns unique rows or values from a dataset.
Examples Given a file test.csv
first_name,last_name,rusty_at,type Andrés,Robalino,10/11/2013,A Andrés,Robalino,10/11/2013,A Jonathan,Turner,10/12/2013,B Yehuda,Katz,10/11/2013,A &amp;gt; `open test.csv | uniq` ━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━┯━━━━━━━━━━━━┯━━━━━━ # │ first_name │ last_name │ rusty_at │ type ───┼────────────┼───────────┼────────────┼────── 0 │ Andrés │ Robalino │ 10/11/2013 │ A 1 │ Jonathan │ Turner │ 10/12/2013 │ B 2 │ Yehuda │ Katz │ 10/11/2013 │ A ━━━┷━━━━━━━━━━━━┷━━━━━━━━━━━┷━━━━━━━━━━━━┷━━━━━━ &amp;gt; `open test.csv | get type | uniq` ━━━┯━━━━━━━━━ # │ &amp;lt;value&amp;gt; ───┼───────── 0 │ A 1 │ B ━━━┷━━━━━━━━━</description></item><item><title>version</title><link>https://nushell.sh/website_exploration/docs/commands/version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/version/</guid><description>Outputs the nushell version.
Examples &amp;gt; version ━━━━━━━━━ version ───────── 0.6.0 ━━━━━━━━━</description></item><item><title>where</title><link>https://nushell.sh/website_exploration/docs/commands/where/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/where/</guid><description>This command filters the content of a table based on a condition passed as a parameter, which must be a boolean expression making use of any of the table columns. Other commands such as ls are capable of feeding where with their output through pipelines.
Where has two general forms:
where &amp;lt;column_name&amp;gt; &amp;lt;comparison&amp;gt; &amp;lt;value&amp;gt; where &amp;lt;column_name&amp;gt; Where with comparison In the first form, where is passed a column name that the filter will run against.</description></item><item><title>which</title><link>https://nushell.sh/website_exploration/docs/commands/which/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/which/</guid><description>Finds a program file.
Usage:
which {flags}
Parameters application: the name of the command to find the path to Flags &amp;ndash;all: list all executables Examples which finds the location of an executable:
/home/bob&amp;gt; which python ━━━━━━━━┯━━━━━━━━━━━━━━━━━┯━━━━━━━━━ arg │ path │ builtin ────────┼─────────────────┼───────── python │ /usr/bin/python │ No ━━━━━━━━┷━━━━━━━━━━━━━━━━━┷━━━━━━━━━ /home/bob&amp;gt; which cargo ━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━┯━━━━━━━━━ arg │ path │ builtin ───────┼────────────────────────────┼───────── cargo │ /home/bob/.cargo/bin/cargo │ No ━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━┷━━━━━━━━━ which will identify nushell commands:</description></item><item><title>wrap</title><link>https://nushell.sh/website_exploration/docs/commands/wrap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/commands/wrap/</guid><description>Wraps data in a table
Syntax: wrap &amp;lt;column&amp;gt;
Parameters column: the (optional) name of the column the data should be stored in. Examples wrap will give a name to a column of &amp;lt;value&amp;gt; data:
/home/chris&amp;gt; ls | get name ───┬────────────── # │ &amp;lt;value&amp;gt; ───┼────────────── 0 │ americas.csv 1 │ iso.csv ───┴────────────── /home/chris&amp;gt; ls | get name | wrap filename ───┬────────────── # │ filename ───┼────────────── 0 │ americas.csv 1 │ iso.</description></item></channel></rss>