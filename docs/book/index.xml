<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Nu Book on Nushell</title><link>https://nushell.sh/website_exploration/docs/book/</link><description>Recent content in Nu Book on Nushell</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://nushell.sh/website_exploration/docs/book/index.xml" rel="self" type="application/rss+xml"/><item><title>Aliases</title><link>https://nushell.sh/website_exploration/docs/book/aliases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/book/aliases/</guid><description>Nu&amp;rsquo;s ability to compose long pipelines allow you a lot of control over your data and system, but it comes at the price of a lot of typing. Ideally, you&amp;rsquo;d be able to save your well-crafted pipelines to use again and again.
This is where aliases come in.
An alias allows you to create a short name for a block of commands. When the alias is run, it&amp;rsquo;s like you typed that block of commands out.</description></item><item><title>Coming from Bash</title><link>https://nushell.sh/website_exploration/docs/book/coming_from_bash/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/book/coming_from_bash/</guid><description>Note: this table assumes Nu 0.14.1 or later.
Bash Nu Task ls ls Lists the files in the current directory ls &amp;lt;dir&amp;gt; ls &amp;lt;dir&amp;gt; Lists the files in the given directory ls pattern* ls pattern* Lists files that match a given pattern ls -la ls --full or ls -f List files with all available information ls -d */ ls | where type == Dir List directories find .</description></item><item><title>Coming from Functional Languages</title><link>https://nushell.sh/website_exploration/docs/book/nushell_map_functional/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/book/nushell_map_functional/</guid><description>The idea behind this table is to help you understand how Nu built-ins and plug-ins relate to functional languages. We&amp;rsquo;ve tried to produce a map of all the Nu commands and what their equivalents are in other languages. Contributions are welcome.
Note: this table assumes Nu 0.14.1 or later.
NuShell Clojure Tablecloth (Ocaml / Elm) Haskell alias append conj, into, concat append, (++), concat, concatMap (++) args autoview average(*) binaryview(*) Integer/toHexString showHex calc, = math math operators cd clear clip compact config count count length, size length, size cp date java.</description></item><item><title>Coming from Imperative Languages</title><link>https://nushell.sh/website_exploration/docs/book/nushell_map_imperative/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/book/nushell_map_imperative/</guid><description>The idea behind this table is to help you understand how Nu built-ins and plug-ins relate to imperative languages. We&amp;rsquo;ve tried to produce a map of all the Nu commands and what their equivalents are in other languages. Contributions are welcome.
Note: this table assumes Nu 0.14.1 or later.
NuShell Python Kotlin (Java) C++ Rust alias append list.</description></item><item><title>Coming from Other Shells</title><link>https://nushell.sh/website_exploration/docs/book/nushell_map/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/book/nushell_map/</guid><description>The idea behind this table is to help you understand how Nu built-ins and plug-ins relate to other known shells and domain specific languages. We&amp;rsquo;ve tried to produce a map of all the Nu commands and what their equivalents are in other languages. Contributions are welcome.
Note: this table assumes Nu 0.14.1 or later.
NuShell SQL .Net LINQ (C#) PowerShell (without external modules) Bash alias - - alias alias append - Append -Append args - - autoview - - average(*) avg Average Measure-Object, measure binaryview(*) - Format-Hex calc, = math math operators Aggregate, Average, Count, Max, Min, Sum bc cd - - Set-Location, cd cd clear - - Clear-Host clear clip - - Set-Clipboard, scb clip, clipboard, xclip, pbcopy compact config - - $Profile vi .</description></item><item><title>Configuration</title><link>https://nushell.sh/website_exploration/docs/book/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/book/configuration/</guid><description>Nu has a small, but growing, number of internal variables you can set to change how it looks and how it operates. Below is a list of the current variables, their types, and a description of how they&amp;rsquo;re used
Variable Type Description completion_mode &amp;ldquo;list&amp;rdquo; or &amp;ldquo;circular&amp;rdquo; the style of autocompletion to use ctrlc_exit boolean whether or not to exit Nu after multiple ctrl-c presses disable_table_indexes boolean removes the table index column edit_mode &amp;ldquo;vi&amp;rdquo; or &amp;ldquo;emacs&amp;rdquo; changes line editing to &amp;ldquo;vi&amp;rdquo; or &amp;ldquo;emacs&amp;rdquo; mode env row the environment variables to pass to external commands header_align &amp;ldquo;center&amp;rdquo;, &amp;ldquo;right&amp;rdquo;, or other aligns table headers center-, right-, or left-aligned key_timeout integer the timeout used to switch between edit modes nonzero_exit_errors boolean whether to print errors for non-zero exit codes for externals path list of strings PATH to use to find binaries startup list of strings commands, like aliases, to run when nushell starts table_mode &amp;ldquo;light&amp;rdquo; or other enable lightweight or normal tables no_auto_pivot boolean whether or not to automatically pivot single-row results Usage Setting variables To set one of these variables, you can use config --set.</description></item><item><title>Data Types</title><link>https://nushell.sh/website_exploration/docs/book/types_of_data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/book/types_of_data/</guid><description>Traditionally, Unix shell commands have communicated with each other using strings of text. One command would output text via standard out (often abbreviated &amp;lsquo;stdout&amp;rsquo;) and the other would read in text via standard in (or &amp;lsquo;stdin&amp;rsquo;). In this way, the two commands could communicate.
We can think of this kind of communication as string-based.
Nu embraces this approach for its commands and grows it to include other kinds of data. Currently, Nu supports two kinds of data types: simple and structured.</description></item><item><title>Environment</title><link>https://nushell.sh/website_exploration/docs/book/environment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/book/environment/</guid><description>A common task in a shell is to control the environment that external applications will use. Often this is done automatically, as the environment is packaged up and given to the external application as it launches. Sometimes, though, we want to have more precise control over what environment variables an application sees.
You can see the current environment variables that will be sent to applications by echoing the value for $nu.</description></item><item><title>Installing Nu</title><link>https://nushell.sh/website_exploration/docs/book/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/book/installation/</guid><description>The best way currently to get Nu up and running is to install from crates.io, download pre-built binaries from our release page, build from source, or pulling a pre-built container with Docker.
Pre-built binaries You can download Nu pre-built from the release page. Alternatively, if you use Homebrew for macOS, you can install the binary by running brew install nushell.
Windows please note: Nu works on Windows 10 and does not currently have Windows 7/8.</description></item><item><title>Introduction</title><link>https://nushell.sh/website_exploration/docs/book/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/book/introduction/</guid><description>Hello, and welcome to the Nushell project. The goal of this project is to take the Unix philosophy of shells, where pipes connect simple commands together, and bring it to the modern style of development.
Nu takes cues from a lot of familiar territory: traditional shells like bash, advanced shells like PowerShell, functional programming, systems programming, and more. But rather than trying to be the jack of all trades, Nu focuses its energy on doing a few things well:</description></item><item><title>Loading Data</title><link>https://nushell.sh/website_exploration/docs/book/loading_data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/book/loading_data/</guid><description>Earlier we saw how you can use commands like ls, ps, date, and sys to load information about your files, processes, time of date, and the system itself. Each command gives us a table of information that we can explore. There are other ways we can load in a table of data to work with.
Opening files One of Nu&amp;rsquo;s most powerful assets in working with data is the open command.</description></item><item><title>Math</title><link>https://nushell.sh/website_exploration/docs/book/math/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/book/math/</guid><description>Sometimes you just need to add a few numbers when you&amp;rsquo;re working on a task. Nu offers a set of basic math operations that you can use:
To get into &amp;ldquo;math mode&amp;rdquo;, you start the command with an =. This lets Nu know what you&amp;rsquo;re about to write will use operators. Some commands, like where will do this for you so that you don&amp;rsquo;t have to.
Add, Subtract, Multiply, Divide &amp;gt; = 1 + 3 4 In Nu, you can do the usual add, subtract, multiply and divide with the operators +, -, *, and / respectively.</description></item><item><title>Metadata</title><link>https://nushell.sh/website_exploration/docs/book/metadata/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/book/metadata/</guid><description>In using Nu, you may have come across times where you felt like there was something extra going on behind the scenes. For example, let&amp;rsquo;s say that you try to open a file that Nu supports only to forget and try to convert again:
&amp;gt; open Cargo.toml | from-toml error: Expected a string from pipeline - shell:1:18 1 | open Cargo.toml | from-toml | ^^^^^^^^^ requires string input - shell:1:5 1 | open Cargo.</description></item><item><title>Native Commands</title><link>https://nushell.sh/website_exploration/docs/book/escaping/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/book/escaping/</guid><description>Nu provides a set of commands that you can use across different OSes, and having this consistency is helpful. Sometimes, though, you want to run a command that has the same name as Nu commands. To run the local ls or date command, for example, you use the caret (^) command.
Nu command:
&amp;gt; ls Escape to local command:
&amp;gt; ^ls</description></item><item><title>Navigation</title><link>https://nushell.sh/website_exploration/docs/book/moving_around/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/book/moving_around/</guid><description>Early shells allow you to move around your filesystem and run commands, and modern shells like Nu allow you to do the same. Let&amp;rsquo;s take a look at some of the common commands you might use when interacting with your system.
Viewing directory contents &amp;gt; ls As we&amp;rsquo;ve seen in other chapters, ls is a command for viewing the contents of a path. Nu will return the contents as a table that we can use.</description></item><item><title>Nu Operators</title><link>https://nushell.sh/website_exploration/docs/book/nushell_operator_map/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/book/nushell_operator_map/</guid><description>The idea behind this table is to help you understand how Nu operators relate to other language operators. We&amp;rsquo;ve tried to produce a map of all the nushell operators and what their equivalents are in other languages. Contributions are welcome.
Note: this table assumes Nu 0.14.1 or later.
NuShell SQL Python .Net LINQ (C#) PowerShell Bash == = == == -eq, -is -eq !</description></item><item><title>Pipelines</title><link>https://nushell.sh/website_exploration/docs/book/pipeline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/book/pipeline/</guid><description>One of the core designs of Nu is the pipeline, a design idea that tracks its roots back decades to some of the original philosophy behind Unix. Just as Nu extends from the single string data type of Unix, Nu also extends the idea of the pipeline to include more than just text.
Basics A pipeline is constructed with three parts: the input, the filter, and the output.
&amp;gt; open &amp;quot;Cargo.</description></item><item><title>Plugins</title><link>https://nushell.sh/website_exploration/docs/book/plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/book/plugins/</guid><description>The functionality of Nu can be extended using plugins. The plugins can perform many of the same operations that Nu&amp;rsquo;s built-in commands can, with the added benefit that they can be added separately of Nu itself.
To add a plugin, simply build it and put the binary in your PATH. Nu plugins begin with the filename nu_plugin_ so that Nu can find them among other binaries in your PATH.
Note: in the future, plugins may have a specific place they need to be put into in order for Nu to find them.</description></item><item><title>Subshells</title><link>https://nushell.sh/website_exploration/docs/book/shells_in_shells/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/book/shells_in_shells/</guid><description>Working in multiple directories While it&amp;rsquo;s common to work in one directory, it can be handy to work in multiple places at the same time. For this, Nu offers the concept of &amp;ldquo;shells&amp;rdquo;. As the name implies, they&amp;rsquo;re a way of running multiple shells in one, allowing you to quickly jump between working directories and more.
To get started, let&amp;rsquo;s enter a directory:
/home/jonathant/Source/nushell(master)&amp;gt; enter ../book /home/jonathant/Source/book(master)&amp;gt; ls ────┬────────────────────┬──────┬────────┬───────────── # │ name │ type │ size │ modified ────┼────────────────────┼──────┼────────┼───────────── 0 │ 404.</description></item><item><title>Tables</title><link>https://nushell.sh/website_exploration/docs/book/working_with_tables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nushell.sh/website_exploration/docs/book/working_with_tables/</guid><description>One of the common ways of seeing data in Nu is through a table. Nu comes with a number of commands for working with tables to make it convenient to find what you&amp;rsquo;re looking for, and for narrowing the data to just what you need.
To start off, let&amp;rsquo;s get a table that we can use:
&amp;gt; ls ───┬───────────────┬──────┬─────────┬──────────── # │ name │ type │ size │ modified ───┼───────────────┼──────┼─────────┼──────────── 0 │ files.</description></item></channel></rss>