<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>nushell on Nushell</title><link>http://nushell.sh/website_exploration/es/</link><description>Recent content in nushell on Nushell</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 29 Jun 2020 21:07:15 -0400</lastBuildDate><atom:link href="http://nushell.sh/website_exploration/es/index.xml" rel="self" type="application/rss+xml"/><item><title>Aliases</title><link>http://nushell.sh/website_exploration/es/docs/book/aliases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://nushell.sh/website_exploration/es/docs/book/aliases/</guid><description>La habilidad de Nu para componer tuberías largas permite tener bastante control de su sistema y datos, pero a costas de tipear mucho. Sería ideal que puedas grabar las tuberías bien elaboradas para hacer uso de esas las veces que quieras.
Aquí es donde aparecen los aliases.
Un alias te permite crear un nombre corto para un bloque de comandos. Cuando se ejecuta el alias, es lo equivalente como si hayas tipeado el bloque de comandos.</description></item><item><title>Cargando datos</title><link>http://nushell.sh/website_exploration/es/docs/book/loading_data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://nushell.sh/website_exploration/es/docs/book/loading_data/</guid><description>Hemos visto como puedes usar comandos como ls, ps, date, y sys para cargar información sobre los archivos, procesos, hora de fecha, y del mismo sistema. Cada comando nos entrega una tabla de información que podemos explorar. Hay otras maneras de cargar datos en una tabla de datos para trabajar.
Abriendo archivos Una de las funciones más destacadas de Nu para trabajar con datos es el comando open. Es una multi-herramienta que puede trabajar con varios formatos de datos.</description></item><item><title>Complementos (plugins)</title><link>http://nushell.sh/website_exploration/es/docs/book/plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://nushell.sh/website_exploration/es/docs/book/plugins/</guid><description>Se puede ampliar la funcionalidad de Nu a través de complementos. Los complementos pueden realizar muchas de las mismas operaciones que los comandos integrados de Nu con el beneficio adicional de que se pueden agregar separado de Nu.
Para agregar un complemento simplemente compílalo y colóca el binario en el PATH. Los complementos de Nu empiezan con nu_plugin_ de manera que Nu pueda encontrarlos entre otros binarios en su PATH.</description></item><item><title>Configuración</title><link>http://nushell.sh/website_exploration/es/docs/book/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://nushell.sh/website_exploration/es/docs/book/configuration/</guid><description>Nu tiene un número pequeño, pero creciente, de variables internas que puedes establecer cambios en su aspecto y funcionamiento. A continuación una lista de las variables actuales, sus tipos, y una descripción de cómo se utilizan:
Variable Tipo Descripción completion_mode &amp;ldquo;list&amp;rdquo; o &amp;ldquo;circular&amp;rdquo; el estilo de autocompletar a usar ctrlc_exit booleano salir o no de Nu después de presionar ctrl-c varias veces disable_table_indexes booleano elimina la columna de índice de la tabla edit_mode &amp;ldquo;vi&amp;rdquo; o &amp;ldquo;emacs&amp;rdquo; cambia edición de línea a modo &amp;ldquo;vi&amp;rdquo; o &amp;ldquo;emacs&amp;rdquo; env fila variables de entorno que serán pasadas a comandos externos header_align &amp;ldquo;center&amp;rdquo;, &amp;ldquo;right&amp;rdquo;, u otro alinea los encabezados de la tabla alineados al centro, a la derecha o a la izquierda key_timeout entero el tiempo de espera utilizado para cambiar entre los modos de edición nonzero_exit_errors booleano si imprimir errores para códigos de salida no-ceros para externos path tabla de cadenas PATH para usar en búsqueda de binarios startup lista de cadenas comandos, como aliases, para ejecutar cuando nushell arranca table_mode &amp;ldquo;light&amp;rdquo; o otro habilitar tablas livianas o normales Uso Configuración de variables Para establecer una de estas variables, puedes usar config --set.</description></item><item><title>El pipeline</title><link>http://nushell.sh/website_exploration/es/docs/book/pipeline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://nushell.sh/website_exploration/es/docs/book/pipeline/</guid><description>Uno de los diseños centrales de Nu es la tubería (pipeline), una idea de diseño que rastrea sus raíces décadas atrás hasta parte de la filosofía original detrás de Unix. Así como Nu extiende desde un solo dato tipo de cadena de Unix, Nu también extiende la idea de tuberías (pipelines) para incluir más que solo texto.
Fundamentos Una tubería (pipeline) es construída con tres partes: la entrada, el filtro, y la salida.</description></item><item><title>Entorno</title><link>http://nushell.sh/website_exploration/es/docs/book/entorno/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://nushell.sh/website_exploration/es/docs/book/entorno/</guid><description>Una tarea común al usar una shell es controlar el ambiente de entorno que aplicaciones externas usarán. Comúnmente esto sucede automáticamente, a medida que el entorno se empaqueta y se entrega a la aplicación externa cuando se inicia. Sin embargo, hay veces que vamos a desear tener control más preciso sobre qué variables de entorno una aplicación pueda ver.
Puedes ver las variables de entorno actuales que se enviarán a las aplicaciones explorando #nu.</description></item><item><title>Environment</title><link>http://nushell.sh/website_exploration/es/docs/book/environment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://nushell.sh/website_exploration/es/docs/book/environment/</guid><description>A common task in a shell is to control the environment that external applications will use. Often this is done automatically, as the environment is packaged up and given to the external application as it launches. Sometimes, though, we want to have more precise control over what environment variables an application sees.
You can see the current environment variables that will be sent to applications by echoing the value for $nu.</description></item><item><title>Escapando al sistema</title><link>http://nushell.sh/website_exploration/es/docs/book/escaping/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://nushell.sh/website_exploration/es/docs/book/escaping/</guid><description>Nu proporciona una serie de comandos que puedes utilitar en diferentes sistemas operativos y tener esta consistencia es de gran ayuda. Sin embargo, a veces, quieres ejecutar un comando que también tiene el mismo nombre de los comandos de Nu. Para ejecutar el comando local ls o date fuera de Nu por ejemplo, usa el comando de intercalación (^).
Comando de Nu:
&amp;gt; ls Escapa al comando local:
&amp;gt; ^ls</description></item><item><title>Explorando en el sistema</title><link>http://nushell.sh/website_exploration/es/docs/book/moving_around/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://nushell.sh/website_exploration/es/docs/book/moving_around/</guid><description>Shells de antes permiten explorar el sistema de archivos y ejecutar comandos. Shells modernas como Nu permiten hacer lo mismo. Miremos algunos comandos comunes que puedas usar cuando interactues con el sistema.
Ver contenido de un directorio &amp;gt; ls Cómo hemos visto en otros capítulos, ls es un comando para mirar el contenido de una ruta. Nu devolverá el contenido en una tabla que podemos usar.
El comando ls también recibe un argumento opcional para cambiar qué te gustaría ver.</description></item><item><title>Instalando Nu</title><link>http://nushell.sh/website_exploration/es/docs/book/instalacion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://nushell.sh/website_exploration/es/docs/book/instalacion/</guid><description>La mejor manera actualmente para poner en marcha Nu es instalándolo a través de crates.io, descargando desde nuestra página, compilarlo desde la fuente, o jalando un contenedor preconstruido con Docker.
Binarios Puedes descargar Nu compilado desde nuestra página. Alternativamente, si usas Homebrew para macOS, puedes instalar el binario ejecutando brew install nushell.
Windows nota: Nu trabaja con Windows 10 y no soporta Windows 7/8.1
Descarga el archivo actual .zip de la página de releases y extráelo por ejemplo a:</description></item><item><title>Introducción</title><link>http://nushell.sh/website_exploration/es/docs/book/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://nushell.sh/website_exploration/es/docs/book/introduction/</guid><description>Hola, y bienvenido al proyecto Nushell. El objectivo de este proyecto es tomar la filosofía Unix de shells, dónde tuberías (pipes) conectan comandos simples juntos y llevarlos al estilo moderno de desarrollo.
Nu toma ideas de muchos territorios familiares: shells tradicionales como bash, shells avanzadas como PowerShell, programación funcional, programación de sistemas, y más. Pero, en lugar de ser un &amp;ldquo;Todo en uno&amp;rdquo;, No enfoca su energía en hacer algunas cosas bien:</description></item><item><title>Llegando desde Bash</title><link>http://nushell.sh/website_exploration/es/docs/book/coming_from_bash/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://nushell.sh/website_exploration/es/docs/book/coming_from_bash/</guid><description>Nota: Esta tabla asume Nushell 0.14.1 or posterior.
Bash Nu Task ls ls Lists the files in the current directory ls &amp;lt;dir&amp;gt; ls &amp;lt;dir&amp;gt; Lists the files in the given directory ls pattern* ls pattern* Lists files that match a given pattern ls -la ls --full or ls -f List files with all available information ls -d */ ls | where type == Dir List directories cd &amp;lt;directory&amp;gt; cd &amp;lt;directory&amp;gt; Change to the given directory cd cd Change to the home directory mkdir &amp;lt;path&amp;gt; mkdir &amp;lt;path&amp;gt; Creates the given path mkdir -p &amp;lt;path&amp;gt; mkdir &amp;lt;path&amp;gt; Creates the given path, creating parents as necessary touch test.</description></item><item><title>Mapa de operadores en Nushell</title><link>http://nushell.sh/website_exploration/es/docs/book/nushell_operator_map/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://nushell.sh/website_exploration/es/docs/book/nushell_operator_map/</guid><description>La idea detrás de esta tabla is ayudarte a entender como los operadores en Nu se relacionan con operadores de otros lenguajes. Hemos intentado producir un mapa de los operadores y sus equivalentes en otros lenguajes. Contribuciones son bienvenidas.
Nota: esta tabla asume Nu 0.14.1 o posterior.
NuShell SQL Python .Net LINQ (C#) PowerShell Bash = = == == -eq, -is -eq !</description></item><item><title>Mapa nushell de lenguajes funcionales</title><link>http://nushell.sh/website_exploration/es/docs/book/nushell_map_functional/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://nushell.sh/website_exploration/es/docs/book/nushell_map_functional/</guid><description>La idea detrás de esta tabla is ayudarte a entender como los comandos internos y plugins en Nu se relacionan con lenguajes funcionales. Hemos intentado producir un mapa de los comandos internos y sus equivalentes en otros lenguajes. Contribuciones son bienvenidas.
Nota: Esta tabla asume Nu 0.14.1 o posterior.
NuShell Clojure Tablecloth (Ocaml / Elm) Haskell alias append conj (++) args autoview average(*) binaryview(*) Integer/toHexString showHex calc, = math math operators cd clear clip compact config count count length length cp date java.</description></item><item><title>Mapa nushell de lenguajes imperativos</title><link>http://nushell.sh/website_exploration/es/docs/book/nushell_map_imperative/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://nushell.sh/website_exploration/es/docs/book/nushell_map_imperative/</guid><description>La idea detrás de esta tabla is ayudarte a entender como los comandos internos y plugins en Nu se relacionan con lenguajes imperativos. Hemos intentado producir un mapa de los comandos internos y sus equivalentes en otros lenguajes. Contribuciones son bienvenidas.
Nota: esta tabla asume Nu 0.14.1 o posterior.
NuShell Python Kotlin (Java) C++ Rust alias append list.</description></item><item><title>Mapa nushell de otras shells y lenguajes DSLs</title><link>http://nushell.sh/website_exploration/es/docs/book/nushell_map/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://nushell.sh/website_exploration/es/docs/book/nushell_map/</guid><description>La idea detrás de esta tabla is ayudarte a entender como los comandos internos y plugins en Nu se relacionan con otras shells conocidas y lenguajes de dominio específicos. Hemos intentado producir un mapa de los comandos internos y sus equivalentes en otros lenguajes. Contribuciones son bienvenidas.
Nota: Esta tabla asume Nu 0.14.1 o posterior.
NuShell SQL .Net LINQ (C#) PowerShell (without external modules) Bash alias N/A N/A alias alias append N/A Append() -Append args N/A N/A autoview N/A N/A average(*) avg Average() Measure-Object, measure binaryview(*) N/A Format-Hex calc, = math math operators Aggregate, Average, Count, Max, Min, Sum bc cd N/A N/A Set-Location, cd cd clear N/A N/A Clear-Host clear clip N/A N/A Set-Clipboard, scb clip, clipboard, xclip, pbcopy compact config N/A N/A $Profile vi .</description></item><item><title>Matemáticas</title><link>http://nushell.sh/website_exploration/es/docs/book/math/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://nushell.sh/website_exploration/es/docs/book/math/</guid><description>Hay veces que simplemente necesitas sumar un par de números cuando te encuentras resolviendo problemas. Nu ofrece un conjunto de operaciones matemáticas básicas que puedes utilizar:
Para entrar al modo &amp;ldquo;math&amp;rdquo;, empiezas el comando con =. Esto le informa a Nu que lo que estás a punto de escribir usará operadores. Algunos comandos, como where lo harán por ti implícitamente para que no tengas que hacerlo.
Sumar, Restar, Mupltiplicar, Dividir &amp;gt; = 1 + 3 4 En Nu puedes realizar lo usual: sumar, restar, mutiplicar y dividir con los operadores +, -, *, y / respectivamente.</description></item><item><title>Metadatos</title><link>http://nushell.sh/website_exploration/es/docs/book/metadata/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://nushell.sh/website_exploration/es/docs/book/metadata/</guid><description>Al usar Nu es posible que hayan momentos que has encontrado como si algo extra sucediera detrás de escenas. Por ejemplo digamos que intentas abrir un archivo soportado por Nu para luego olvidarte e intentar convertir nuevamente:
&amp;gt; open Cargo.toml | from-toml error: Expected a string from pipeline - shell:1:18 1 | open Cargo.toml | from-toml | ^^^^^^^^^ requires string input - shell:1:5 1 | open Cargo.toml | from-toml | ---------- object originates from here El mensaje de error nos indica que hemos proporcionado a from-toml algo distinto a una cadena pero también el origen del valor.</description></item><item><title>Shells en shells</title><link>http://nushell.sh/website_exploration/es/docs/book/shells_in_shells/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://nushell.sh/website_exploration/es/docs/book/shells_in_shells/</guid><description>Trabajando con múltiples directorios Mientras es común trabajar en un directorio puede ser beneficioso trabajar en múltiples lugares al mismo tiempo. Para esto Nu ofrece el concepto de &amp;ldquo;shells&amp;rdquo;. Tal como implica, son una manera de tener activo múltiples shells en uno permitiendote rápidamente saltar entre directorios de trabajo y más.
Para empezar entremos a un directorio:
/home/jonathan/Source/nushell(master)&amp;gt; enter ../lark /home/jonathan/Source/lark(master)&amp;gt; ls ----+----------------+-----------+----------+---------+---------------+--------------- # | name | type | readonly | size | accessed | modified ----+----------------+-----------+----------+---------+---------------+--------------- 0 | Cargo.</description></item><item><title>Tipos de datos</title><link>http://nushell.sh/website_exploration/es/docs/book/types_of_data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://nushell.sh/website_exploration/es/docs/book/types_of_data/</guid><description>Tradicionalmente, comandos shell de Unix se han comunidado entre ellos usando cadenas de texto. Un comando generaría de salida texto a través de la salida estándar (comúnmente abreviada &amp;lsquo;stdout&amp;rsquo;) y el otro leer texto a través de la entrada estándar (o &amp;lsquo;stdin&amp;rsquo;).
Podemos pensar de este tipo de comunicación como basada en cadenas.
Nu adopta este enfoque para sus comandos y lo hacer crecer para incluir otro tipos de datos. Actualmente, Nu incluye soporte para dos tipos de datos: simple y estructurada.</description></item><item><title>Trabajando con tablas</title><link>http://nushell.sh/website_exploration/es/docs/book/working_with_tables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://nushell.sh/website_exploration/es/docs/book/working_with_tables/</guid><description>Una de las maneras comunes de mirar datos en Nu es a través de una tabla. Nu viene con una serie de comandos que trabajan con tablas para que pueda ser más conveniente encontrar lo que estás buscando y para limitar los datos a solo lo que necesites.
Para empezar, consigamos una tabla que podamos usar:
&amp;gt; ls ---+---------------+------+----------+---------+------------+------------ # | name | type | readonly | size | accessed | modified ---+---------------+------+----------+---------+------------+------------ 0 | add.</description></item></channel></rss>